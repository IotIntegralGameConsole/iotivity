'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building CA Module for Linux---------------\n'

Import('env_linux')
import os

env_linux['CC'] = 'g++'

PROJECT_HOME = '../..'

VARIANT_DIR = env_linux['VARIANT_DIR']
IOTIVITY_ROOT = env_linux['ORG_SRC']
TARGET_ARCH = env_linux.get('TARGET_ARCH')
TARGET_TRANSPORT = env_linux.get('TARGET_TRANSPORT')
TARGET_TEST = env_linux.get('TARGET_TEST')

if env_linux.get('SECURED') == '1':
    SECURED = True
else:
    SECURED = False

if env_linux.get('RELEASE'):
    RELEASE_DIR = 'release'
else:
    RELEASE_DIR = 'debug'

if IOTIVITY_ROOT.endswith('/'):
    IOTIVITY_ROOT = IOTIVITY_ROOT[:-1]

create_target_dir = env_linux.Command('target.out', [], Mkdir(VARIANT_DIR))
pre_job = [create_target_dir]
default_targets = [pre_job]
install_targets = []

TRANSPORT_LIST = [ 'NONE', 'IP', 'TCP' ]
TRANSPORT_BIN_NAME = [ 'iotivity_ca_test', 'iotivity_ca_ip_test', 'iotivity_ca_tcp_test' ]
TRANSPORT_CPPDEFINES = [
                            [''],
                            ['__IP__', '__ALL_TRANSPORT__'],
                            ['__TCP__', '__ALL_TRANSPORT__', 'TCP_ADAPTER']
                       ]

IOTIVITY_LIB_PATH = IOTIVITY_ROOT + '/out/linux/' + TARGET_ARCH + '/' + RELEASE_DIR


IOTIVITY_INCLUDE_PATH = [
                            IOTIVITY_ROOT + '/resource/csdk/stack/include',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/api',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/common/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/external/inc',
                            IOTIVITY_ROOT + '/resource/c_common/oic_malloc/include',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',
                            IOTIVITY_ROOT + '/extlibs/mbedtls/mbedtls/include/mbedtls',
                            IOTIVITY_ROOT + '/resource/c_common',
                            IOTIVITY_ROOT + '/resource/csdk/logger/include',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/lib/libcoap-4.1.1/include'
                        ]

TC_INCLUDE_PATH = [
                    PROJECT_HOME + '/include',
                    PROJECT_HOME + '/src/tc/ca/gtest/include',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/include',
                    PROJECT_HOME + '/src/tc/ca/gtest/include/testcase/ca'
                  ]

SIMULATOR_INCLUDE_PATH = [ PROJECT_HOME + '/src/testapp/ca/c_cpp/include' ]

LIB_PATH_LIST = [
                    IOTIVITY_LIB_PATH,
                    IOTIVITY_LIB_PATH + '/resource/csdk/logger',
                    IOTIVITY_LIB_PATH + '/resource/c_common/',
                    IOTIVITY_LIB_PATH + '/resource/csdk/routing/',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux'
                ]

COMMON_CPPFLAGS = Split('-s -pthread -march=native -std=gnu++0x -Wall -fpermissive -finstrument-functions -ftest-coverage -fprofile-arcs')

COMMON_CPPDEFINES = Split('LINUX __LINUX__')

GTEST_UNSPECIFIED_NETWORK_SRC = [ PROJECT_HOME + '/src/tc/ca/gtest/src/btc/CATest.cpp', PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CACommonTest.cpp' ]

GTEST_IP_NETWORK_SRC = [
                            PROJECT_HOME + '/src/tc/ca/gtest/src/btc/CANetworkTest.cpp',
                            PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CANetworkCommonTest.cpp',
                            PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CAClientTest.cpp',
                            PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CAMulticastTest.cpp'
                       ]

GTEST_TCP_NETWORK_SRC = [
                            PROJECT_HOME + '/src/tc/ca/gtest/src/btc/CANetworkTest.cpp',
                            PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CANetworkCommonTest.cpp',
                            PROJECT_HOME + '/src/tc/ca/gtest/src/stc/CAClientTest.cpp'
                       ]

GTEST_SRC = [GTEST_UNSPECIFIED_NETWORK_SRC, GTEST_IP_NETWORK_SRC, GTEST_TCP_NETWORK_SRC]

TC_COMMON_SRC = [
                    PROJECT_HOME + '/src/common/commonutil/c_cpp/trace.c',
                    PROJECT_HOME + '/src/common/testcase/gtest/IotivitySECTestMain.cpp',
                    PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp',
                    PROJECT_HOME + '/src/tc/ca/gtest/src/helper/CAHelper.cpp'
                ]

lib_list = Split('libboost_system libboost_filesystem libboost_thread rt gio-2.0 gobject-2.0 glib-2.0 uuid libdl libexpat pthread gcov coap octbstack connectivity_abstraction ocsrm c_common')

if SECURED:
    lib_list.append('mbedtls')
    lib_list.append('mbedx509')
    lib_list.append('mbedcrypto')
    COMMON_CPPDEFINES.append('__WITH_DTLS__')

if TARGET_TEST == None or 'tc' in TARGET_TEST or 'all' in TARGET_TEST:
    i = -1

    for transport in TRANSPORT_LIST:

        i = i + 1

        if TARGET_TRANSPORT != 'ALL':
            if TARGET_TRANSPORT != transport:
                continue

        temp_source_list = []

        cpp_defines = COMMON_CPPDEFINES + TRANSPORT_CPPDEFINES[i]

        for single_cpp in TC_COMMON_SRC + GTEST_SRC[i]:
            temp_single_cpp = str(single_cpp)

            if not (temp_single_cpp.endswith('.cpp') or temp_single_cpp.endswith('.c') ):
                continue

            single_object = temp_single_cpp.replace('.cpp', '.o').replace('.c', '.o').replace('/', '_').replace('..', '')
            single_object = 'ca' + '/' + TRANSPORT_LIST[i] + '/' + single_object

            temp_object = env_linux.Object(source = single_cpp,
                            target = single_object,
                            CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH,
                            LIBS = lib_list,
                            LIBPATH = LIB_PATH_LIST,
                            CPPFLAGS = COMMON_CPPFLAGS,
                            CPPDEFINES = cpp_defines,
                            RPATH = IOTIVITY_LIB_PATH
                            )
            temp_source_list.append(single_object)

        ca_tc = env_linux.Program(source = temp_source_list,
                            target = TRANSPORT_BIN_NAME[i],
                            CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH,
                            LIBS = lib_list + ['gtest'],
                            LIBPATH = LIB_PATH_LIST,
                            CPPFLAGS = COMMON_CPPFLAGS,
                            CPPDEFINES = cpp_defines,
                            RPATH = IOTIVITY_LIB_PATH
                            )
        install_targets += ca_tc


if TARGET_TEST == None or 'app' in TARGET_TEST or 'all' in TARGET_TEST:
    simulator_cpp_defines = COMMON_CPPDEFINES

    if 'ALL' in TARGET_TRANSPORT or 'TCP' in TARGET_TRANSPORT:
        simulator_cpp_defines.append('WITH_TCP')
        simulator_cpp_defines.append('TCP_ADAPTER')

    ca_simulator = env_linux.Program(source = [PROJECT_HOME + '/src/testapp/ca/c_cpp/src/ca_simulator.c'],
                        target = 'iotivity_ca_simulator',
                        CPPPATH = IOTIVITY_INCLUDE_PATH + SIMULATOR_INCLUDE_PATH,
                        LIBS = lib_list,
                        LIBPATH = LIB_PATH_LIST,
                        CPPFLAGS = COMMON_CPPFLAGS,
                        CPPDEFINES = simulator_cpp_defines,
                        RPATH = IOTIVITY_LIB_PATH
                        )

    install_targets += ca_simulator

install = env_linux.Install(PROJECT_HOME + '/' + VARIANT_DIR, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
