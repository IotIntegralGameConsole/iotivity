'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building CA Module for Linux---------------\n'

Import('env_linux')
import os

env_linux['CC'] = 'g++'

PROJECT_HOME = '../../'

VARIANT_DIR = env_linux['VARIANT_DIR']
IOTIVITY_ROOT = env_linux['ORG_SRC']
TARGET_ARCH = env_linux.get('TARGET_ARCH')
TARGET_TRANSPORT = env_linux.get('TARGET_TRANSPORT')
TARGET_TEST = env_linux.get('TARGET_TEST')
SECURED = env_linux.get('SECURED')

create_target_dir = env_linux.Command('target.out', [], Mkdir(VARIANT_DIR))
pre_job = [create_target_dir]
default_targets = [pre_job]
install_targets = []

if env_linux.get('RELEASE'):
	RELEASE_DIR = 'release'
else:
	RELEASE_DIR = 'debug'

TRANSPORT_LIST = [ 'NONE', 'IP', 'TCP' ]
BINARY_SUBSTRING_LIST = [ '', '_ip', '_tcp' ]
BIN_NAME_LIST = [ 'iotivity_ca_test', 'iotivity_ca_ip_test', 'iotivity_ca_tcp_test' ]
TRANSPORT_CFLAGS_LIST = [ 
                            ['', ''], 
                            ['-D__IP__', '-D__ALL_TRANSPORT__'], 
                            ['-DWITH_TCP', '-DTCP_ADAPTER', '-D__TCP__', '-D__ALL_TRANSPORT__']
                        ]	

IOTIVITY_LIB_PATH = IOTIVITY_ROOT + '/out/linux/' + TARGET_ARCH + '/' + RELEASE_DIR

IOTIVITY_INCLUDE_PATH = [
                            IOTIVITY_ROOT + '/resource/csdk/stack/include',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/api',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/common/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/external/inc',
                            IOTIVITY_ROOT + '/resource/c_common/oic_malloc/include',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',
                            IOTIVITY_ROOT + '/extlibs/timer',
                            IOTIVITY_ROOT + '/resource/c_common',
                            IOTIVITY_ROOT + '/resource/csdk/logger/include'
                        ]

TC_INCLUDE_PATH = [
                    PROJECT_HOME + '/include',
                    PROJECT_HOME + '/src/tc/ca/gtest/include',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/include',
                    PROJECT_HOME + '/src/tc/ca/gtest/include/testcase/ca'
                  ]

SIMULATOR_INCLUDE_PATH = [ PROJECT_HOME + '/src/testapp/ca/c_cpp/include' ]

LIB_PATH_LIST = [
                    IOTIVITY_LIB_PATH,
                    IOTIVITY_LIB_PATH + '/resource/csdk/logger',
                    IOTIVITY_LIB_PATH + '/resource/c_common/',
                    IOTIVITY_LIB_PATH + '/resource/csdk/routing/',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux'
                ]

common_cflags = Split('-s -pthread -march=native -std=gnu++0x -Wall -DLINUX -fpermissive -D__LINUX__ -finstrument-functions -ftest-coverage -fprofile-arcs')

TC_SRC_LIST = Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp') + Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/helper/*.cpp') + Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/btc/*.cpp') + Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/stc/*.cpp')

lib_list = Split('libboost_system libboost_filesystem libboost_thread rt gio-2.0 gobject-2.0 glib-2.0 uuid libdl libexpat pthread gcov coap octbstack connectivity_abstraction timer ocsrm c_common')

if SECURED == '1':
	common_cflags.append('-D__WITH_DTLS__')	
	lib_list.append('tinydtls')

if 'ALL' in TARGET_TRANSPORT or 'TCP' in TARGET_TRANSPORT:
    lib_list.append('mbedtls') 
    lib_list.append('mbedx509')
    lib_list.append('mbedcrypto')


if TARGET_TEST == None or 'tc' in TARGET_TEST or 'all' in TARGET_TEST:    
    i = -1
	
    for transport in TRANSPORT_LIST:

	    i = i + 1
	
	    if TARGET_TRANSPORT != 'ALL':
		    if TARGET_TRANSPORT != transport:
			    continue

	    network_common_cflags = common_cflags[:]
	
	    for transport_cflag in TRANSPORT_CFLAGS_LIST[i]:
		    if transport_cflag != '':
			    network_common_cflags.append(transport_cflag)
	
	    temp_source_list = []			

	    trace_object = 'ca' + BINARY_SUBSTRING_LIST[i] + 'trace.o'
	    env_linux.Object(source = Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/trace.c'), 
                        target = trace_object, 
                        CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                        LIBS = lib_list, 
                        LIBPATH = LIB_PATH_LIST, 
                        CPPFLAGS = network_common_cflags)
	    temp_source_list.append(trace_object)
		
	    main_object = 'ca' + BINARY_SUBSTRING_LIST[i] + 'test_main'
	    env_linux.Object(source = Glob(PROJECT_HOME + '/src/common/testcase/gtest' + '/IotivitySECTestMain.cpp'), 
                        target = main_object, 
                        CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                        LIBS = lib_list, 
                        LIBPATH = LIB_PATH_LIST, 
                        CPPFLAGS = network_common_cflags)
	    temp_source_list.append(main_object)

	    for single_cpp in TC_SRC_LIST:
		    temp_single_cpp = str(single_cpp)
		    if not temp_single_cpp.endswith('.cpp'):
			    continue
		    single_object = temp_single_cpp.replace('.cpp', '.o')
		    single_object = 'ca' + BINARY_SUBSTRING_LIST[i] + single_object
		    env_linux.Object(source = single_cpp, 
                            target = single_object, 
                            CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                            LIBS = lib_list, 
                            LIBPATH = LIB_PATH_LIST, 
                            CPPFLAGS = network_common_cflags)
		    temp_source_list.append(single_object)
	
	    ca_tc = env_linux.Program(source = temp_source_list + [ PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux/libgtest.a' ], 
                            target = BIN_NAME_LIST[i], 
                            CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                            LIBS = lib_list, 
                            LIBPATH = LIB_PATH_LIST, 
                            CPPFLAGS = network_common_cflags)
	    install_targets += ca_tc


if TARGET_TEST == None or 'app' in TARGET_TEST or 'all' in TARGET_TEST:
    simulator_cflags = common_cflags[:]

    if 'ALL' in TARGET_TRANSPORT or 'TCP' in TARGET_TRANSPORT:
	    simulator_cflags.append('-DWITH_TCP')
	    simulator_cflags.append('-DTCP_ADAPTER')
	
    ca_simulator = env_linux.Program(source = [PROJECT_HOME + '/src/testapp/ca/c_cpp/src/ca_simulator.c'],
                        target = 'iotivity_ca_simulator', 
                        CPPPATH = IOTIVITY_INCLUDE_PATH + SIMULATOR_INCLUDE_PATH, 
                        LIBS = lib_list, 
                        LIBPATH = LIB_PATH_LIST, 
                        CPPFLAGS = simulator_cflags)

    install_targets += [ca_simulator]

install = env_linux.Install(PROJECT_HOME + VARIANT_DIR, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1    

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)