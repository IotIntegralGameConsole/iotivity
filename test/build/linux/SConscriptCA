'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building Connectivity Abstruction Module for Linux---------------\n'

Import('env_linux')
import os


# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
SRC_HOME = ENV_HOME + '/IotivitySECDevSource'
ORG_SRC = ''

target_source = env_linux.get('TARGET_SOURCE')
iotivity_directory = env_linux.get('IOTIVITY_DIR')

#print "target source is --------------------------------" + target_source
print "iotivity root is --------------------------------" + iotivity_directory

if env_linux.get('RELEASE'):
	target_release = 'release'
else:
	target_release = 'debug'
	
print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

print "ORG_SRC_HOME: " + ORG_SRC_HOME 

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release 
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

######################################################################

######################################################################

# Initializing CA Dir
######################################################################
CA_IOT = ENV_HOME + ORG_SRC
CA_DIR = CA_IOT + '/resource/csdk/connectivity'
CA_CSDK_STACK_INCLUDE = CA_IOT + '/resource/csdk/stack/include'
CA_API_INCLUDE = CA_DIR + '/api'
CA_API_INCLUDE2 = CA_DIR + '/inc'
CA_API_INCLUDE_COMMON = CA_DIR + '/common/inc'
CA_API_INCLUDE_EXTERNAL = CA_DIR + '/external/inc'
CA_LIB_DIR = CA_IOT + '/out/linux/' + target_arch + '/' + target_release
CA_MALLOC_INCLUDE = CA_IOT + '/resource/c_common/oic_malloc/include'
CA_OIC_STRING_INCLUDE = CA_IOT + '/resource/c_common/oic_string/include'
CA_RESOURCE_TIMER_HEADER = ORG_SRC_HOME + '/extlibs/timer'
CA_RESOURCE_TIMER_LIB = CA_LIB_DIR + '/extlibs/timer'
CA_RESOURCE_C_COMMON = CA_IOT + '/resource/c_common'
######################################################################

######################################################################

# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/linux'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################
# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

TC_DIR = PROJECT_HOME +  TARGET + 'tc' + '/ca/gtest/src'
STC_DIR = TC_DIR + '/stc'
BTC_DIR = TC_DIR + '/btc'

TESTAPP_DIR = PROJECT_HOME +  TARGET + 'testapp/ca/c_cpp'
TESTAPP_CINCLUDE = TESTAPP_DIR + '/include'


COMMON_DIR = PROJECT_HOME +  TARGET + 'common'
COMMON_UTIL_DIR = PROJECT_HOME + TARGET + 'common/commonutil/c_cpp'
CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'

TESTAPP_COMMON_DIR = COMMON_DIR + '/testapp/c_cpp'

INCLUDE_DIR =  PROJECT_HOME + '/src/tc/ca/gtest/include'
TC_INCLUDE_DIR = INCLUDE_DIR + '/testcase'

CA_INCLUDE_DIR = INCLUDE_DIR + '/testcase/ca'
CA_SIMULATOR_INCLUDE_DIR = TESTAPP_CINCLUDE

COMMON_UTIL_INCLUDE_DIR = PROJECT_HOME + '/include'

TESTAPP_CA_DIR = TESTAPP_DIR + '/src'

#TARGET = PROJECT_HOME + '/bin'
TARGET = env_linux['VARIANT_DIR'] 

######################################################################

# Initializing Flags
######################################################################

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUX__ -D__LINUX__ -finstrument-functions -ftest-coverage -fprofile-arcs')

PKG_FLAGS = Split('`pkg-config --cflags --libs uuid`')

CA_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR]
CA_CINCLUDE = [COMMON_CINCLUDE, CA_API_INCLUDE, CA_API_INCLUDE2, CA_INCLUDE_DIR, CA_API_INCLUDE_COMMON, CA_API_INCLUDE_EXTERNAL, CA_MALLOC_INCLUDE, CA_OIC_STRING_INCLUDE, CA_CSDK_STACK_INCLUDE, CA_RESOURCE_C_COMMON]

CA_SIMULATOR_CINCLUDE = [COMMON_CINCLUDE, CA_API_INCLUDE, CA_API_INCLUDE2, CA_SIMULATOR_INCLUDE_DIR, CA_API_INCLUDE_COMMON, CA_API_INCLUDE_EXTERNAL, CA_MALLOC_INCLUDE, CA_OIC_STRING_INCLUDE]

######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR, CA_LIB_DIR, '/usr/local/lib/', CA_LIB_DIR + '/resource/c_common']

CA_LIB_LOCATION = [COMMON_LIB_LOCATION]

COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger liboc_logger_core libconnectivity_abstraction libcoap pthread libglib-2.0 uuid gcov')

CA_STATIC_LIBS = [CA_LIB_DIR + '/libconnectivity_abstraction.a', CA_LIB_DIR + '/libtinydtls.a', CA_LIB_DIR + '/libcoap.a', COMMON_RELEASE_DIR + '/resource/csdk/logger/liblogger.a', CA_RESOURCE_TIMER_LIB + '/timer.o']
CA_SHARED_LIBS = Split('-lboost_system -lboost_filesystem -ldl -lexpat -lexpat -lcoap -lpthread -lglib-2.0 -lbluetooth -lrt gcov ')
CA_LIBS = [CA_SHARED_LIBS] + ['rt', 'c_common', 'gio-2.0', 'gobject-2.0', 'glib-2.0', 'uuid']

######################################################################

# Initializing Targets
######################################################################

CA_SIMULATOR_BIN = 'iotivity_ca_simulator'

TEST_MAIN_BIN = 'test_main.o'

######################################################################

# Initializing Sources
######################################################################

COMMON_CPP = Glob(COMMON_UTIL_DIR + '/trace.c')

COMMON_UTIL_CPP = Glob(COMMON_UTIL_DIR + '/CommonUtil.cpp')

TEST_MAIN = Glob(PROJECT_HOME +  TARGET + 'common/testcase/gtest' + '/IotivitySECTestMain.cpp')

CA_HELPER_CPP = Glob(TC_DIR + '/helper/*.cpp')

CA_UTC_CPP = Glob(BTC_DIR + '/*.cpp')
CA_ITC_CPP = Glob(STC_DIR + '/*.cpp')

CA_SIMULATOR_C = [TESTAPP_CA_DIR + '/ca_simulator.c']

CA_CPP = [COMMON_UTIL_CPP, CA_HELPER_CPP, CALL_GRAPH_CPP, TEST_MAIN]

CA_OICTEST_TC_SRC = COMMON_UTIL_CPP + CA_HELPER_CPP + CA_UTC_CPP + CA_ITC_CPP

CA_SIMULATOR_SRC = [CA_SIMULATOR_C, COMMON_STATIC_LIBS, CA_STATIC_LIBS]

######################################################################
# Initializing Build
######################################################################
env_linux.ParseConfig("pkg-config --cflags --libs uuid")

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

pre_job = [create_target_dir]

target_service = env_linux.get('TARGET_SERVICE')
target_transport = env_linux.get('TARGET_TRANSPORT')
target_tc = env_linux.get('TARGET_TC')
secured = env_linux.get('SECURED')
default_targets = [pre_job]
install_targets = []

env_linux.AppendUnique(CPPFLAGS = PKG_FLAGS)

if secured == '1':
	CA_CFLAGS.append("-D__WITH_DTLS__")	

list_of_transport = [ 'NONE', 'IP', 'TCP']
tranport_binary_substrings = ['', '_ip', '_tcp']
transport_specific_bins = ['iotivity_ca_test', 'iotivity_ca_ip_test', 'iotivity_ca_tcp_test']
list_transport_cflags = [['', ''], ['-D__IP__', '-D__ALL_TRANSPORT__'], ['-DWITH_TCP', '-D__TCP__', '-D__ALL_TRANSPORT__']]

i = -1
	
for transport in list_of_transport:

	i = i + 1
	
	if target_transport != 'ALL':
		if target_transport != transport:
			continue

	NETWORK_CA_CFLAGS = CA_CFLAGS[:]
	
	for transport_cflag in list_transport_cflags[i]:
		if transport_cflag != '':
			print 'added cflag: ' + transport_cflag
			NETWORK_CA_CFLAGS.append(transport_cflag)
			
	print 'transport: ' + transport
	print 'Network_ca_cflags: ' + str(NETWORK_CA_CFLAGS )
	
	LIST_OF_SRC = []			

	trace_object = 'ca' + tranport_binary_substrings[i] + 'trace.o'
	env_linux.Object(source = COMMON_CPP, target = trace_object, CPPPATH = CA_CINCLUDE, LIBS = CA_LIBS, LIBPATH = CA_LIB_LOCATION, CPPFLAGS = NETWORK_CA_CFLAGS)
	LIST_OF_SRC.append(trace_object)
		
	main_object = 'ca' + tranport_binary_substrings[i] + 'test_main'
	env_linux.Object(source = [TEST_MAIN], target = main_object, CPPPATH = CA_CINCLUDE, LIBS = CA_LIBS, LIBPATH = CA_LIB_LOCATION, CPPFLAGS = NETWORK_CA_CFLAGS)
	LIST_OF_SRC.append(main_object)

	for single_cpp in CA_OICTEST_TC_SRC:
		temp_single_cpp = str(single_cpp)
		if not temp_single_cpp.endswith('.cpp'):
			continue
		single_object = temp_single_cpp.replace('.cpp', '.o')
		single_object = 'ca' + tranport_binary_substrings[i] + single_object
		env_linux.Object(source = single_cpp, target = single_object, CPPPATH = CA_CINCLUDE, LIBS = CA_LIBS, LIBPATH = CA_LIB_LOCATION, CPPFLAGS = NETWORK_CA_CFLAGS)
		LIST_OF_SRC.append(single_object)
	
	ca_tc = env_linux.Program(source = [LIST_OF_SRC, COMMON_STATIC_LIBS, CA_STATIC_LIBS], target = transport_specific_bins[i], CPPPATH = CA_CINCLUDE, LIBS = CA_LIBS, LIBPATH = CA_LIB_LOCATION, CPPFLAGS = NETWORK_CA_CFLAGS)
	install_targets += ca_tc

SIMULATOR_CA_FLAGS = CA_CFLAGS[:]

if 'ALL' in target_transport or 'TCP' in target_transport:
	SIMULATOR_CA_FLAGS.append('-DWITH_TCP')
	
ca_simulator = env_linux.Program(source = CA_SIMULATOR_SRC, target = CA_SIMULATOR_BIN, CPPPATH = CA_SIMULATOR_CINCLUDE, LIBS = [CA_LIBS], LIBPATH = CA_LIB_LOCATION, CPPFLAGS = SIMULATOR_CA_FLAGS)

print "target_service = " + target_service
print "target_tc = " + target_tc
print "target_transport = " + target_transport

#SConscript(GTEST + '/SConscript')

print "---------------service--------------" + target_service + target_tc

if 'ca' in target_service or 'all' in target_service:
    if 'itc' in target_tc or 'all' in target_tc:
        print '---------------CA Build Selected---------------'
        install_targets += [ca_simulator]
        install_targets += ca_tc

install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1    

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
