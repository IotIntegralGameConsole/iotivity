'''
******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building TAF Agent for Linux---------------\n'

Import('env_linux')
import os

lib_env = env_linux.Clone()

# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
ORG_SRC = ''

SECURED = env_linux.get('SECURED')

if env_linux.get('RELEASE'):
    target_release = 'release'
else:
    target_release = 'debug'

print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

conf2 = Configure(lib_env)
if not conf2.CheckLib('xml2'):
    print '''X
*********************************** Error *************************************
* Cannot build. Please install libxml2.
* Example (Ubuntu):
*   sudo apt-get install libxml2 libxml2-dev
*   sudo ldconfig
* Hint: check with pkg-config --libs libxml2 libxml2-dev and clear scons cache.
*******************************************************************************
    '''
lib_env = conf2.Finish()

TAF_RESOURCE_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
TAF_RESOURCE_CBOR = ORG_SRC_HOME + '/extlibs/tinycbor/tinycbor/src/'

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

TAF_SOURCE_DIR = PROJECT_HOME +  TARGET + 'automation/ctt/src'
TAF_LIB_DIR = PROJECT_HOME +  '/extlibs/taf/lib/unix/'

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -Wall -DLINUX -D__LINUX__ -DWITH_TCP -fpermissive -finstrument-functions -ftest-coverage -fprofile-arcs')

TAF_CFLAGS = [COMMON_FLAGS]

TAF_CINCLUDE = [
                            '/usr/include',
			    '/usr/include/libxml2',
                            PROJECT_HOME + '/include',
                            PROJECT_HOME + '/src/automation/ctt/include',
                            PROJECT_HOME + '/extlibs/taf/include',
                            PROJECT_HOME + '/../resource/include',
                            PROJECT_HOME + '/../resource/csdk/connectivity/api',
                            PROJECT_HOME + '/../resource/csdk/stack/include',
                            PROJECT_HOME + '/../resource/csdk/include',
                            PROJECT_HOME + '/../resource/csdk/security/include',
                            PROJECT_HOME + '/../resource/csdk/ocsocket/include',
                            PROJECT_HOME + '/../resource/csdk/ocrandom/include',
                            PROJECT_HOME + '/../resource/csdk/logger/include',
                            PROJECT_HOME + '/../resource/c_common/',
                            PROJECT_HOME + '/../resource/oc_logger/include',
                            PROJECT_HOME + '/../extlibs/cereal/include/',
                            PROJECT_HOME + '/../extlibs/timer/',
                            PROJECT_HOME + '/../extlibs/tinycbor/tinycbor/src/',
                            PROJECT_HOME + '/../extlibs/timer/'
              ]

COMMON_LIB_LOCATION = [RESOURCE_LIB_DIR, TAF_LIB_DIR]
TAF_LIB_LOCATION = [COMMON_LIB_LOCATION, TAF_RESOURCE_LIB]

COMMON_STATIC_LIBS = []
COMMON_SHARED_LIBS = Split('uv util xml2 libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction libcoap pthread libglib-2.0 gcov')


TAF_STATIC_RESOURCE_LIBS = []
TAF_LIBS = COMMON_SHARED_LIBS

TAF_APP_BIN = 'TAFAgent'

DUT_CONTROLLER_C = TAF_SOURCE_DIR + '/dutcontroller.c'
MINI_HTTP_SERVER_C = TAF_SOURCE_DIR + '/mini_http_server.c'
RESOURCE_MAP_C = TAF_SOURCE_DIR + '/resource_map.c'
SOURCE_C = TAF_SOURCE_DIR + '/taf_agent.c'
TAF_APP_SRC = [MINI_HTTP_SERVER_C, RESOURCE_MAP_C, DUT_CONTROLLER_C, SOURCE_C]

######################################################################
# Initializing Build
######################################################################

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

TAF_APP = env_linux.Program(source = TAF_APP_SRC, target = TAF_APP_BIN, CPPPATH = TAF_CINCLUDE, LIBS = TAF_LIBS, LIBPATH = TAF_LIB_LOCATION, RPATH = TAF_RESOURCE_LIB, CPPFLAGS = TAF_CFLAGS)

copy_justworks_dat_file = env_linux.Command('copy_justworks_dat_file', [], Copy('.', '../resource/csdk/security/provisioning/sample/oic_svr_db_server_justworks.dat'))
copy_randompin_dat_file = env_linux.Command('copy_randompin_dat_file', [], Copy('.', '../resource/csdk/security/provisioning/sample/oic_svr_db_server_randompin.dat'))

pre_job = [create_target_dir]

######################################################################
# Define Build Targets
######################################################################

default_targets = [pre_job]
install_targets = []


#TAF_APP
install_targets += [TAF_APP]

install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin + [copy_justworks_dat_file, copy_randompin_dat_file]

env_linux.Default(default_targets)

