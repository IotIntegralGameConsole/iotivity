'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building NS CSDK TestCases for Linux---------------\n'

Import('env_linux')
import os


# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
SRC_HOME = ENV_HOME + '/IotivitySECDevSource'
ORG_SRC = ''

if env_linux.get('RELEASE'):
	target_release = 'release'
else:
	target_release = 'debug'

print "target build is -------------------------------- " + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

######################################################################
# Initializing NS Dir
######################################################################

NS_RESOURCE_DIR = ORG_SRC_HOME + '/resource'
NS_RESOURCE_INCLUDE = NS_RESOURCE_DIR + '/include'
NS_C_COMMON = NS_RESOURCE_DIR + '/c_common'
NS_C_STRING = NS_C_COMMON + '/oic_string/include'
NS_RESOURCE_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
NS_RESOURCE_STACK = NS_RESOURCE_DIR + '/csdk/stack/include'
NS_RESOURCE_SOCKET = NS_RESOURCE_DIR + '/csdk/ocsocket/include'
NS_RESOURCE_RANDOM = NS_RESOURCE_DIR + '/csdk/ocrandom/include'
NS_RESOURCE_LOGGER = NS_RESOURCE_DIR + '/csdk/logger/include'
NS_RESOURCE_OC_LOGGER = NS_RESOURCE_DIR + '/oc_logger/include'
NS_RESOURCE_CEREAL = ORG_SRC_HOME + '/extlibs/cereal/include/'
NS_DIR = ORG_SRC_HOME + '/service/notification'
NS_INCLUDE = NS_DIR + '/include'
NS_SRC_DIR = NS_DIR + '/src'
LOGGER_INC_DIR = ORG_SRC_HOME + '/resource/csdk/logger/include'

######################################################################

# Initializing CA Dir
######################################################################

CA_IOT = ENV_HOME + ORG_SRC
CA_LIB_DIR = CA_IOT + '/out/linux/' + target_arch + '/' + target_release

######################################################################
# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/linux'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################
######################################################################

# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

TC_DIR = PROJECT_HOME +  TARGET + 'tc' + '/ns/gtest/csdk/src'
STC_DIR = TC_DIR + '/stc'
BTC_DIR = TC_DIR + '/btc'

COMMON_DIR = PROJECT_HOME +  TARGET + 'common'
COMMON_UTIL_DIR = PROJECT_HOME +  TARGET + 'common/commonutil/c_cpp'
CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'
TC_COMMON_DIR = COMMON_DIR + '/testcase'

INCLUDE_DIR = PROJECT_HOME + '/src/tc/ns/gtest/csdk/include'
TC_INCLUDE_DIR = INCLUDE_DIR + '/testcase'
NS_INCLUDE_DIR = INCLUDE_DIR + '/testcase/ns'

COMMON_UTIL_INCLUDE_DIR = PROJECT_HOME + '/include'

TESTAPP_INCLUDE_DIR = INCLUDE_DIR + '/testapp'

######################################################################

# Initializing Flags
######################################################################

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUUX__ -D__LINUX__ -D __WITH_DTLS__  -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

PKG_FLAGS = Split('`pkg-config --cflags --libs uuid`')

NS_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR, LOGGER_INC_DIR]

NS_CINCLUDE = [COMMON_CINCLUDE, NS_RESOURCE_INCLUDE, NS_RESOURCE_STACK, NS_RESOURCE_SOCKET, NS_RESOURCE_RANDOM, NS_RESOURCE_OC_LOGGER, NS_INCLUDE, NS_RESOURCE_CEREAL, NS_SRC_DIR, NS_INCLUDE_DIR, NS_C_COMMON, NS_C_STRING]

######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR, CA_LIB_DIR, '/usr/local/lib/', CA_LIB_DIR + '/resource/c_common']
NS_LIB_LOCATION = [COMMON_LIB_LOCATION, NS_RESOURCE_LIB]

COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libconnectivity_abstraction liboctbstack libcoap libboost_system libboost_filesystem libboost_thread libdl libexpat liboc  liboc_logger liboc_logger_core pthread libglib-2.0 uuid gcov')
NS_PROVIDER_SHARED_LIBS = Split('libnotification_provider')
NS_CONSUMER_SHARED_LIBS = Split('libnotification_consumer')

NS_PROVIDER_LIBS = [COMMON_SHARED_LIBS, NS_PROVIDER_SHARED_LIBS]
NS_CONSUMER_LIBS = [COMMON_SHARED_LIBS, NS_CONSUMER_SHARED_LIBS]
NS_LIBS = [COMMON_SHARED_LIBS, NS_CONSUMER_SHARED_LIBS, NS_PROVIDER_SHARED_LIBS]

######################################################################

# Initializing Targets
######################################################################


NS_PROVIDER_TEST_BIN = 'iotivity_ns_provider_test'
NS_CONSUMER_TEST_BIN = 'iotivity_ns_consumer_test'
NS_PROVIDER_BIN = 'iotivity_ns_provider_test'
NS_PROVIDER_BIN = 'iotivity_ns_consumer_test'

NS_PROVIDER_TESTAPP_BIN = 'ns_provider_testapp'
NS_CONSUMER_TESTAPP_BIN = 'ns_consumer_testapp'

######################################################################

# Initializing Sources
######################################################################

COMMON_CPP = Glob(COMMON_UTIL_DIR + '/*.cpp')
COMMON_TC_CPP = Glob(COMMON_DIR + '/testcase/*.cpp')

NS_PROVIDER_HELPER_CPP = Glob(TC_DIR + '/helper/*ProviderHelper.cpp')
NS_CONSUMER_HELPER_CPP = Glob(TC_DIR + '/helper/*ConsumerHelper.cpp')

COMMON_UTIL_CPP = COMMON_UTIL_DIR + '/CommonUtil.cpp'

TEST_MAIN = [PROJECT_HOME +  TARGET + 'common/testcase/gtest' + '/IotivitySECTestMain.cpp'] 

NS_CONSUMER_STC_CPP = Glob(STC_DIR + '/*ConsumerTest.cpp')
NS_CONSUMER_BTC_CPP = Glob(BTC_DIR + '/*ConsumerTest.cpp')

NS_PROVIDER_STC_CPP = Glob(STC_DIR + '/*ProviderTest.cpp')
NS_PROVIDER_BTC_CPP = Glob(BTC_DIR + '/*ProviderTest.cpp')

NS_CPP = [TEST_MAIN, COMMON_UTIL_CPP, CALL_GRAPH_CPP, TC_DIR + '/helper/NSCommonHelper.cpp']

NS_PROVIDER_TC_SRC = [NS_CPP, NS_PROVIDER_HELPER_CPP, NS_PROVIDER_BTC_CPP, NS_PROVIDER_STC_CPP, COMMON_STATIC_LIBS]
NS_CONSUMER_TC_SRC = [NS_CPP, NS_CONSUMER_HELPER_CPP, NS_CONSUMER_BTC_CPP, NS_CONSUMER_STC_CPP, COMMON_STATIC_LIBS]

NS_TESTAPP_INC = [PROJECT_HOME + TARGET + 'iBtestapp/modules/ns/c_cpp/csdk/include', NS_CINCLUDE]
NS_PROVIDER_APP_SRC = [PROJECT_HOME +  TARGET + 'iBtestapp/modules/ns/c_cpp/csdk/src/NSProviderApp.cpp']
NS_CONSUMER_APP_SRC = [PROJECT_HOME +  TARGET + 'iBtestapp/modules/ns/c_cpp/csdk/src/NSConsumerApp.cpp']

### NS Simulator ###
NS_PROVIDER_SIMULATOR_BIN = 'ns_provider_simulator'
NS_CONSUMER_SIMULATOR_BIN = 'ns_consumer_simulator'
SIMULATOR_INC = [PROJECT_HOME + TARGET + 'testapp/ns/csdk/include', NS_CINCLUDE, COMMON_CINCLUDE]
PROVIDER_SIMUTALOR_SRC = [COMMON_UTIL_CPP, COMMON_STATIC_LIBS, PROJECT_HOME + TARGET + 'testapp/ns/csdk/src/NSProviderSimulator.cpp']
CONSUMER_SIMUTALOR_SRC = [COMMON_UTIL_CPP, COMMON_STATIC_LIBS, PROJECT_HOME + TARGET + 'testapp/ns/csdk/src/NSConsumerSimulator.cpp']

######################################################################

# Initializing Build
######################################################################

env_linux.ParseConfig("pkg-config --cflags --libs uuid")

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

ns_provider_tc_build = env_linux.Program(source = NS_PROVIDER_TC_SRC, target = NS_PROVIDER_TEST_BIN, CPPPATH = NS_CINCLUDE, LIBS = NS_PROVIDER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)
ns_consumer_tc_build = env_linux.Program(source = NS_CONSUMER_TC_SRC, target = NS_CONSUMER_TEST_BIN, CPPPATH = NS_CINCLUDE, LIBS = NS_CONSUMER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)

ns_provider_simulator = env_linux.Program(source = PROVIDER_SIMUTALOR_SRC, target = NS_PROVIDER_SIMULATOR_BIN, CPPPATH = SIMULATOR_INC, LIBS = NS_PROVIDER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)
ns_consumer_simulator = env_linux.Program(source = CONSUMER_SIMUTALOR_SRC, target = NS_CONSUMER_SIMULATOR_BIN, CPPPATH = SIMULATOR_INC, LIBS = NS_CONSUMER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)

ns_provider_app = env_linux.Program(source = NS_PROVIDER_APP_SRC, target = NS_PROVIDER_TESTAPP_BIN, CPPPATH = NS_TESTAPP_INC, LIBS = NS_PROVIDER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)
ns_consumer_app = env_linux.Program(source = NS_CONSUMER_APP_SRC, target = NS_CONSUMER_TESTAPP_BIN, CPPPATH = NS_TESTAPP_INC, LIBS = NS_CONSUMER_LIBS, LIBPATH = NS_LIB_LOCATION, CPPFLAGS = NS_CFLAGS)

env_linux.AppendUnique(CPPFLAGS = PKG_FLAGS)

pre_job = [create_target_dir]

######################################################################

# Define Build Targets
######################################################################

target_service = env_linux.get('TARGET_SERVICE')
target_transport = env_linux.get('TARGET_TRANSPORT')
target_test = env_linux.get('TARGET_TEST')
default_targets = [pre_job]
install_targets = []

print "target_service = " + target_service
print "target_test = " + target_test
print "target_transport = " + target_transport

#SConscript(GTEST + '/SConscript')

print "---------------service--------------" + target_service + target_test


if 'ns' in target_service or 'all' in target_service:
    if 'tc' in target_test or 'all' in target_test:
        print '---------------NS Build Selected---------------'
        install_targets += ns_provider_tc_build
        install_targets += ns_consumer_tc_build
        install_targets += ns_provider_simulator
        install_targets += ns_consumer_simulator
    if 'app' in target_test or 'all' in target_test:
        print '---------------NS TEST APP Build Selected---------------'
        install_targets += [ns_provider_app]
        install_targets += [ns_consumer_app]

install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
