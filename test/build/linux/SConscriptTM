'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building IotivitySecTest for Linux---------------\n'

Import('env_linux')
import os


# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
SRC_HOME = ENV_HOME + '/IotivitySECDevSource'
ORG_SRC = ''

target_source = env_linux.get('TARGET_SOURCE')
iotivity_directory = env_linux.get('IOTIVITY_DIR')

print "target source is --------------------------------" + target_source
print "iotivity root is --------------------------------" + iotivity_directory

if env_linux.get('RELEASE'):
	target_release = 'release'
else:
	target_release = 'debug'

print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release 
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

######################################################################
# Initializing TM Dir
######################################################################

TM_RESOURCE_DIR = ORG_SRC_HOME + '/resource'
TM_RESOURCE_INCLUDE = TM_RESOURCE_DIR + '/include'
TM_C_COMMON = TM_RESOURCE_DIR + '/c_common'
TM_RESOURCE_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
TM_RESOURCE_CSDK_LIB = TM_RESOURCE_LIB
TM_RESOURCE_STACK = TM_RESOURCE_DIR + '/csdk/stack/include'
TM_RESOURCE_SOCKET = TM_RESOURCE_DIR + '/csdk/ocsocket/include'
TM_RESOURCE_RANDOM = TM_RESOURCE_DIR + '/csdk/ocrandom/include'
TM_RESOURCE_LOGGER = TM_RESOURCE_DIR + '/csdk/logger/include'
TM_RESOURCE_OC_LOGGER = TM_RESOURCE_DIR + '/oc_logger/include'
TM_RESOURCE_CEREAL = ORG_SRC_HOME + '/extlibs/cereal/include/'
TM_RESOURCE_TIMER = ORG_SRC_HOME + '/extlibs/timer/'
TM_RESOURCE_OC_LOGGER_LIB = TM_RESOURCE_LIB
TM_DIR = ORG_SRC_HOME + '/service/things-manager'
TM_INCLUDE = TM_DIR + '/sdk/inc'
TM_SDK_INCLUDE = TM_DIR + '/sdk/src'
TM_LIB = TM_RESOURCE_LIB
TM_LIB_TIMER = TM_RESOURCE_LIB + '/extlibs/timer/'

######################################################################

# Initializing CA Dir
######################################################################

CA_IOT = ENV_HOME + ORG_SRC
CA_LIB_DIR = CA_IOT + '/out/linux/' + target_arch + '/' + target_release

######################################################################
# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/linux'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################
######################################################################

# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

TC_DIR = PROJECT_HOME +  TARGET + 'tc' + '/tm/gtest/src'
STC_DIR = TC_DIR + '/stc'
BTC_DIR = TC_DIR + '/btc'
TESTAPP_DIR = PROJECT_HOME +  TARGET + 'testapp'
TESTAPP_CINCLUDE = PROJECT_HOME + '/include/testapp'


COMMON_DIR = PROJECT_HOME +  TARGET + 'common'
COMMON_UTIL_DIR = PROJECT_HOME +  TARGET + 'common/commonutil/c_cpp'
CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'
TC_COMMON_DIR = COMMON_DIR + '/testcase'
TM_COMMON_DIR = COMMON_DIR + '/testcase/tm/gtest'
TESTAPP_COMMON_DIR = COMMON_DIR + '/testapp/c_cpp'

INCLUDE_DIR = PROJECT_HOME + '/src/tc/tm/gtest/include'
TC_INCLUDE_DIR = INCLUDE_DIR + '/testcase'
TM_INCLUDE_DIR = INCLUDE_DIR + '/testcase/tm'


#COMMON_UTIL_INCLUDE_DIR = INCLUDE_DIR + '/commonutil'
COMMON_UTIL_INCLUDE_DIR = PROJECT_HOME + '/include'


TESTAPP_INCLUDE_DIR = INCLUDE_DIR + '/testapp'


######################################################################

# Initializing Flags
######################################################################

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUUX__ -D__LINUX__ -D __WITH_DTLS__  -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

PKG_FLAGS = Split('`pkg-config --cflags --libs uuid`')

TM_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR]


TM_CINCLUDE = [COMMON_CINCLUDE, TM_RESOURCE_INCLUDE, TM_RESOURCE_STACK, TM_RESOURCE_SOCKET, TM_RESOURCE_RANDOM, TM_RESOURCE_OC_LOGGER, TM_INCLUDE, TM_RESOURCE_CEREAL, TM_RESOURCE_TIMER, TM_LIB_TIMER, TM_SDK_INCLUDE, TM_INCLUDE_DIR, TM_C_COMMON]


######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR, CA_LIB_DIR, '/usr/local/lib/', CA_LIB_DIR + '/resource/c_common']
TM_LIB_LOCATION = [COMMON_LIB_LOCATION, TM_RESOURCE_LIB, TM_RESOURCE_CSDK_LIB, TM_RESOURCE_OC_LOGGER_LIB, TM_LIB]


COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger liboc_logger_core libconnectivity_abstraction libcoap pthread libglib-2.0 uuid gcov')

TM_STATIC_LIBS = [TM_LIB + '/libTGMSDKLibrary.a']
TM_STATIC_RESOURCE_LIBS = []
TM_LIBS = COMMON_SHARED_LIBS

######################################################################

# Initializing Targets
######################################################################


TM_ITC_BIN = 'iotivity_tm_test'

TEST_SERVER_BIN = 'testserver'
UNSUPPORTIVE_SERVER_BIN = 'unsupportivetestserver'
BOOTSTRAP_SERVER_BIN = 'bootstrapserver'
TEST_COLLECTION_BIN = 'testcollection'



######################################################################

# Initializing Sources
######################################################################

COMMON_CPP = Glob(COMMON_UTIL_DIR + '/*.cpp')
COMMON_TC_CPP = Glob(COMMON_DIR + '/testcase/*.cpp')

TM_HELPER_CPP = Glob(TC_DIR + '/helper/*.cpp')


COMMON_UTIL_CPP = COMMON_UTIL_DIR + '/CommonUtil.cpp'

RESOURCE_SERVER_CPP = COMMON_UTIL_DIR + '/ResourceServer.cpp'
SAMPLE_RESOURCE_CPP = COMMON_UTIL_DIR + '/SampleResource.cpp'
UNSUPPORTIVE_RESOURCE_CPP = COMMON_UTIL_DIR + '/UnsupportiveResource.cpp'

TEST_SERVER_CPP = TESTAPP_DIR + '/tm/c_cpp/src/testservers.cpp'
UNSUPPORTIVE_TEST_SERVER_CPP = TESTAPP_DIR + '/tm/c_cpp/src/unsupportivetestservers.cpp'
BOOTSTRAP_SERVER_CPP = TESTAPP_DIR + '/tm/c_cpp/src/bootstrapserver.cpp'
TEST_COLLECTION_CPP = TESTAPP_DIR + '/tm/c_cpp/src/testcollections.cpp'


TEST_MAIN = [PROJECT_HOME +  TARGET + 'common/testcase/gtest' + '/IotivitySECTestMain.cpp'] 


TM_ITC_CPP = Glob(STC_DIR + '/*.cpp')
TM_UTC_CPP = Glob(BTC_DIR + '/*.cpp')


TM_CPP = [TEST_MAIN, COMMON_UTIL_CPP, TM_HELPER_CPP, CALL_GRAPH_CPP]


TM_ITC_SRC = [TM_CPP, TM_ITC_CPP, TM_UTC_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]
TM_UTC_SRC = [TM_CPP, TM_UTC_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]

TEST_SERVER_SRC = [TEST_SERVER_CPP, COMMON_UTIL_CPP, SAMPLE_RESOURCE_CPP, RESOURCE_SERVER_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]

UNSUPPORTIVE_SERVER_SRC = [UNSUPPORTIVE_TEST_SERVER_CPP, COMMON_UTIL_CPP, UNSUPPORTIVE_RESOURCE_CPP, RESOURCE_SERVER_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]

BOOTSTRAP_SERVER_SRC = [BOOTSTRAP_SERVER_CPP, COMMON_UTIL_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]

TEST_COLLECTION_SRC = [TEST_COLLECTION_CPP, COMMON_UTIL_CPP, SAMPLE_RESOURCE_CPP, RESOURCE_SERVER_CPP, COMMON_STATIC_LIBS, TM_STATIC_LIBS, TM_STATIC_RESOURCE_LIBS]


######################################################################

# Initializing Build
######################################################################

env_linux.ParseConfig("pkg-config --cflags --libs uuid")

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

tm_itc = env_linux.Program(source = TM_ITC_SRC, target = TM_ITC_BIN, CPPPATH = TM_CINCLUDE, LIBS = TM_LIBS, LIBPATH = TM_LIB_LOCATION, CPPFLAGS = TM_CFLAGS)

test_server = env_linux.Program(source = TEST_SERVER_SRC, target = TEST_SERVER_BIN, CPPPATH = TM_CINCLUDE, LIBS = TM_LIBS, LIBPATH = TM_LIB_LOCATION, CPPFLAGS = TM_CFLAGS)

unsupportive_server = env_linux.Program(source = UNSUPPORTIVE_SERVER_SRC, target = UNSUPPORTIVE_SERVER_BIN, CPPPATH = TM_CINCLUDE, LIBS = TM_LIBS, LIBPATH = TM_LIB_LOCATION, CPPFLAGS = TM_CFLAGS)

bootstrap_server = env_linux.Program(source = BOOTSTRAP_SERVER_SRC, target = BOOTSTRAP_SERVER_BIN, CPPPATH = TM_CINCLUDE, LIBS = TM_LIBS, LIBPATH = TM_LIB_LOCATION, CPPFLAGS = TM_CFLAGS)

test_collection = env_linux.Program(source = TEST_COLLECTION_SRC, target = TEST_COLLECTION_BIN, CPPPATH = TM_CINCLUDE, LIBS = TM_LIBS, LIBPATH = TM_LIB_LOCATION, CPPFLAGS = TM_CFLAGS)



env_linux.AppendUnique(CPPFLAGS = PKG_FLAGS)

pre_job = [create_target_dir]

######################################################################

# Define Build Targets
######################################################################

target_service = env_linux.get('TARGET_SERVICE')
target_transport = env_linux.get('TARGET_TRANSPORT')
target_tc = env_linux.get('TARGET_TC')
default_targets = [pre_job]
install_targets = []

print "target_service = " + target_service
print "target_tc = " + target_tc
print "target_transport = " + target_transport

#SConscript(GTEST + '/SConscript')

print "---------------service--------------" + target_service + target_tc


if 'tm' in target_service or 'all' in target_service:
    install_targets += [test_server, unsupportive_server, bootstrap_server, test_collection]
    
    if 'itc' in target_tc or 'all' in target_tc:
        print '---------------TM ITC Build Selected---------------'
        install_targets += tm_itc



install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
