'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building PM Module for Linux---------------\n'

Import('env_linux')
import os

env_linux['CC'] = 'g++'

PROJECT_HOME = '../../'

VARIANT_DIR = env_linux['VARIANT_DIR']
IOTIVITY_ROOT = env_linux['ORG_SRC']
TARGET_ARCH = env_linux.get('TARGET_ARCH')
TARGET_TRANSPORT = env_linux.get('TARGET_TRANSPORT')
TARGET_TEST = env_linux.get('TARGET_TEST')
SECURED = env_linux.get('SECURED')

create_target_dir = env_linux.Command('target.out', [], Mkdir(VARIANT_DIR))
pre_job = [create_target_dir]
default_targets = [pre_job]
install_targets = []

if env_linux.get('RELEASE'):
    RELEASE_DIR = 'release'
else:
    RELEASE_DIR = 'debug'


IOTIVITY_LIB_PATH = IOTIVITY_ROOT + '/out/linux/' + TARGET_ARCH + '/' + RELEASE_DIR

arch_flag = ''
if TARGET_ARCH in ['x86']:
    env_linux.AppendUnique(CCFLAGS = ['-m32'])
    env_linux.AppendUnique(LINKFLAGS = ['-m32'])
    arch_flag = '-m32'
elif TARGET_ARCH in ['x86_64']:
    env_linux.AppendUnique(CCFLAGS = ['-m64'])
    env_linux.AppendUnique(LINKFLAGS = ['-m64'])
    arch_flag = '-m64'

IOTIVITY_INCLUDE_PATH = [
                            IOTIVITY_ROOT + '/resource/csdk',
                            IOTIVITY_ROOT + '/resource/csdk/security/include',
                            IOTIVITY_ROOT + '/resource/csdk/security/provisioning/include',
                            IOTIVITY_ROOT + '/resource/csdk/security/provisioning/include/internal',
                            IOTIVITY_ROOT + '/resource/csdk/security/provisioning/include/oxm',
                            IOTIVITY_ROOT + '/resource/include',
                            IOTIVITY_ROOT + '/resource/csdk/stack/include',
                            IOTIVITY_ROOT + '/resource/csdk/ocrandom/include',
                            IOTIVITY_ROOT + '/resource/csdk/logger/include',                                                        
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/common/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/lib/libcoap-4.1.1',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/api',
                            IOTIVITY_ROOT + '/resource/c_common/oic_malloc/include',
                            IOTIVITY_ROOT + '/resource/c_common',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',                                                       
                            IOTIVITY_ROOT + '/extlibs/tinydtls',
                            IOTIVITY_ROOT + '/extlibs/cjson',
                            IOTIVITY_ROOT + '/extlibs/base64',
                            IOTIVITY_ROOT + '/extlibs/tinycbor/tinycbor/src',
                            IOTIVITY_ROOT + '/resource/oc_logger/include'
                        ]

PM_CERT_INCLUDE_PATH = [
                            IOTIVITY_ROOT + '/resource/csdk/security/provisioning/ck_manager/include',
                            IOTIVITY_ROOT + '/resource/csdk/security/include/internal',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc/pkix',
                            IOTIVITY_ROOT + '/extlibs/asn1cert',
                            IOTIVITY_ROOT + '/extlibs/tinydtls/ecc',
                            IOTIVITY_ROOT + '/extlibs/tinydtls/sha2',
                            IOTIVITY_ROOT + '/extlibs/asn1cert/'
                            ]


TC_INCLUDE_PATH = [
                    PROJECT_HOME + '/include',
                    PROJECT_HOME + '/src/tc/pm/gtest/pmcpp/include',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/include',
                  ]
                  
TEST_APP_INCLUDE_PATH = [PROJECT_HOME + 'src/iBtestapp/modules/pm/c_cpp/cpp/include']

SIMULATOR_INCLUDE_PATH = []

LIB_PATH_LIST = [
                    IOTIVITY_LIB_PATH,
                    IOTIVITY_LIB_PATH + '/resource/csdk/logger',
                    IOTIVITY_LIB_PATH + '/resource/csdk/security/provisioning/ck_manager',
                    IOTIVITY_LIB_PATH + '/resource/csdk/security',
                    IOTIVITY_LIB_PATH + '/resource/c_common/',
                    IOTIVITY_LIB_PATH + '/resource/csdk/routing/',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux'
                ]

common_cflags = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUUX__ -D__LINUX__ -D __WITH_DTLS__  -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

TC_SRC_LIST = [
                Glob( IOTIVITY_LIB_PATH + '/resource/csdk/security/src/*.o'),
                Glob(IOTIVITY_ROOT + '/extlibs/asn1cert/*.o'),
                Glob(IOTIVITY_LIB_PATH + '/resource/csdk/connectivity/src/adapter_util/pkix/*.o'),
                Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp'),
                Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/trace.c'),
                Glob(PROJECT_HOME + '/src/common/testcase/gtest/IotivitySECTestMain.cpp'),
                Glob(PROJECT_HOME + '/src/tc/pm/gtest/pmcpp/src/helper/*.cpp'),
                Glob(PROJECT_HOME + '/src/tc/pm/gtest/pmcpp/src/btc/*.cpp'),
                Glob(PROJECT_HOME + '/src/tc/pm/gtest/pmcpp/src/stc/*.cpp')
                ]
                
TEST_APP_SRC_LIST = [
                Glob( IOTIVITY_LIB_PATH + '/resource/csdk/security/src/*.o'),
                Glob(IOTIVITY_ROOT + '/extlibs/asn1cert/*.o'),
                Glob(IOTIVITY_LIB_PATH + '/resource/csdk/connectivity/src/adapter_util/pkix/*.o'),
                Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp'),
                Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/trace.c'),
                Glob(PROJECT_HOME + '/src/iBtestapp/modules/pm/c_cpp/cpp/src/*.cpp')
                ]

lib_list = Split('boost_system boost_filesystem boost_thread c_common CKManager coap connectivity_abstraction asn1 dl expat gcov gio-2.0 gobject-2.0 glib-2.0 m oc oc_logger octbstack ocpmapi ocprovision ocsrm octbstack pthread rt uuid timer tinydtls')



if TARGET_TEST == None or 'tc' in TARGET_TEST or 'all' in TARGET_TEST:    

    pmcpp_tc = env_linux.Program(source = TC_SRC_LIST + [ PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux/libgtest.a' ], 
                        target = 'iotivity_pmcpp_test', 
                        CPPPATH = IOTIVITY_INCLUDE_PATH + PM_CERT_INCLUDE_PATH + TC_INCLUDE_PATH, 
                        LIBS = lib_list, 
                        LIBPATH = LIB_PATH_LIST, 
                        CPPFLAGS = common_cflags)            
                        
    install_targets += pmcpp_tc
    
    pmcpp_jw_simulator = env_linux.Program(source = PROJECT_HOME + '/src/testapp/pm/justworks_simulator.cpp', 
                    target = 'sampleserver_justworks', 
                    CPPPATH = IOTIVITY_INCLUDE_PATH, 
                    LIBS = lib_list, 
                    LIBPATH = LIB_PATH_LIST, 
                    CPPFLAGS = common_cflags)    
    
    install_targets += pmcpp_jw_simulator
                        
    pmcpp_rndmpin_simulator = env_linux.Program(source = PROJECT_HOME + '/src/testapp/pm/randompin_simulator.cpp', 
                target = 'sampleserver_randompin', 
                CPPPATH = IOTIVITY_INCLUDE_PATH, 
                LIBS = lib_list, 
                LIBPATH = LIB_PATH_LIST, 
                CPPFLAGS = common_cflags)           

    install_targets += pmcpp_rndmpin_simulator

if TARGET_TEST == None or 'app' in TARGET_TEST or 'all' in TARGET_TEST:
    
    pmcpp_test_app = env_linux.Program(source = TEST_APP_SRC_LIST + [ PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux/libgtest.a' ], 
                target = 'pmcpp_test_app', 
                CPPPATH = IOTIVITY_INCLUDE_PATH + PM_CERT_INCLUDE_PATH + TC_INCLUDE_PATH + TEST_APP_INCLUDE_PATH, 
                LIBS = lib_list, 
                LIBPATH = LIB_PATH_LIST, 
                CPPFLAGS = common_cflags)

    install_targets += pmcpp_test_app


if TARGET_TEST == None or 'tc' in TARGET_TEST or 'all' in TARGET_TEST:
    cert_lib_path = PROJECT_HOME + '/res/cert_data'
    pm_resource_path = PROJECT_HOME + '/res/pm_resource'
    
    cert_resource_list = Glob(cert_lib_path + '/*.*')
    pm_resource_list = Glob(pm_resource_path + '/*.*')
    
    default_targets += [create_target_dir]
    
    i = 0
    for cert_resource in cert_resource_list:
        copy_cert_dir = env_linux.Command('copy_cert_dir' + str(i), [], Copy(VARIANT_DIR, cert_resource))
        print(cert_resource)
        i = i + 1
        default_targets += [copy_cert_dir]
        
    for pm_resource in pm_resource_list:
        pm_resource_backup = env_linux.Command('pm_resource_backup' + str(i), [], Copy(VARIANT_DIR, pm_resource))
        pm_bin_dir = env_linux.Command('pm_bin_dir' + str(i), [], Copy(VARIANT_DIR + '../', pm_resource))
        i = i + 1
        default_targets += [pm_resource_backup, pm_bin_dir]

install = env_linux.Install(PROJECT_HOME + VARIANT_DIR, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1    

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
