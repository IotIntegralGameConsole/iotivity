'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building Resource Directory IotivitySecTest for Linux---------------\n'

Import('env_linux')
import os

# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
SRC_HOME = ENV_HOME + '/IotivitySECDevSource'
ORG_SRC = ''

target_source = env_linux.get('TARGET_SOURCE')
iotivity_directory = env_linux.get('IOTIVITY_DIR')

print "target source is --------------------------------" + target_source
print "iotivity root is --------------------------------" + iotivity_directory

if env_linux.get('RELEASE'):
	target_release = 'release'
else:
	target_release = 'debug'

print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release 
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

######################################################################
# Initializing CA Dir
######################################################################

CA_IOT = ENV_HOME + ORG_SRC
CA_LIB_DIR = CA_IOT + '/out/linux/' + target_arch + '/' + target_release

######################################################################

# Initializing RD Dir
######################################################################

RD_DIR = ORG_SRC_HOME + '/service/resource-directory'
RD_INCLUDE = RD_DIR + '/include'
RD_INCLUDE_INTERNAL = RD_DIR + '/src/internal'
RD_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
RD_RESOURCE_DIR = ORG_SRC_HOME + '/resource'
RD_RESOURCE_INCLUDE = RD_RESOURCE_DIR + '/include'
RD_RESOURCE_STACK = RD_RESOURCE_DIR + '/csdk/stack/include'
RD_RESOURCE_SOCKET = RD_RESOURCE_DIR + '/csdk/ocsocket/include'
RD_RESOURCE_RANDOM = RD_RESOURCE_DIR + '/csdk/ocrandom/include'
RD_RESOURCE_LOGGER = RD_RESOURCE_DIR + '/csdk/logger/include'
RD_RESOURCE_OC_LOGGER = RD_RESOURCE_DIR + '/oc_logger/include'
RD_CONNECTIVITY_MALLOC = ORG_SRC_HOME + '/resource/c_common/oic_malloc/include'
RD_CONNECTIVITY_C_COMMON = ORG_SRC_HOME + '/resource/c_common'
RD_CONNECTIVITY_STRING = ORG_SRC_HOME + '/resource/c_common/oic_string/include'
RD_CONNECTIVITY_LOGGER = ORG_SRC_HOME + '/resource/csdk/connectivity/common/inc'

######################################################################

######################################################################

# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/linux'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################

# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

TC_DIR = PROJECT_HOME +  TARGET + 'tc' + '/rd/gtest/src'
STC_DIR = TC_DIR + '/stc'
BTC_DIR = TC_DIR + '/btc'
TESTAPP_DIR = PROJECT_HOME +  TARGET + 'testapp'
SAMPLE_APP_DIR = '../../../service/resource-directory/samples'
TESTAPP_CINCLUDE = PROJECT_HOME + '/include'

COMMON_DIR = PROJECT_HOME +  TARGET + 'common'
COMMON_UTIL_DIR = PROJECT_HOME +  TARGET + 'common/commonutil/c_cpp'
CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'
TC_COMMON_DIR = TC_DIR + '/helper'

TESTAPP_COMMON_DIR = PROJECT_HOME +  TARGET + '/testapp/rd'

INCLUDE_DIR = PROJECT_HOME + '/src/tc/rd/gtest'
TC_INCLUDE_DIR = INCLUDE_DIR + '/include'
RD_INCLUDE_DIR = TC_INCLUDE_DIR

COMMON_UTIL_INCLUDE_DIR = PROJECT_HOME + '/include'

TESTAPP_INCLUDE_DIR = PROJECT_HOME + '/include'

######################################################################

# Initializing Flags
######################################################################

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUUX__ -D__LINUX__ -D __WITH_DTLS__  -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

PKG_FLAGS = Split('`pkg-config --cflags --libs uuid`')
RD_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR]
RD_CINCLUDE = [COMMON_CINCLUDE, RD_INCLUDE, RD_INCLUDE_DIR, RD_RESOURCE_INCLUDE, RD_INCLUDE_INTERNAL, RD_RESOURCE_OC_LOGGER, RD_RESOURCE_STACK, RD_RESOURCE_SOCKET, RD_RESOURCE_RANDOM, RD_CONNECTIVITY_C_COMMON, RD_CONNECTIVITY_MALLOC, RD_CONNECTIVITY_STRING, RD_RESOURCE_LOGGER]

######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR, CA_LIB_DIR, '/usr/local/lib/', CA_LIB_DIR + '/resource/c_common']

RD_LIB_LOCATION = [COMMON_LIB_LOCATION]

COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger liboc_logger_core libconnectivity_abstraction libcoap pthread libglib-2.0 uuid gcov')

RD_SHARED_LIBS = Split('libresource_directory')
RD_STATIC_LIBS = []
RD_LIBS = [RD_SHARED_LIBS, COMMON_SHARED_LIBS]

######################################################################

# Initializing Targets
######################################################################

TEST_MAIN_BIN = 'test_main.o'
COMMON_UTIL_BIN = 'common_util.o'

RD_TEST_BIN = 'iotivity_rd_test'

RD_SIM_MAIN = 'rd_server'
RD_SIM_PUB = 'rd_publishingClient'

######################################################################

# Initializing Sources
######################################################################

RD_HELPER_CPP = Glob(PROJECT_HOME + '/src/tc/rd/gtest/src/helper/*.cpp')

COMMON_UTIL_CPP = COMMON_UTIL_DIR + '/CommonUtil.cpp'

TEST_MAIN = [PROJECT_HOME + TARGET + '/common/testcase/gtest/IotivitySECTestMain.cpp'] 

RD_STC_CPP = Glob(PROJECT_HOME + '/src/tc/rd/gtest/src/stc/*.cpp')
RD_BTC_CPP = Glob(PROJECT_HOME + '/src/tc/rd/gtest/src/btc/*.cpp')

#RD_SIMULATOR_SERVER_CPP =  TESTAPP_DIR + '/rd/rd_main.c'
#RD_SIMULATOR_PUB_CLIENT_CPP =  TESTAPP_DIR + '/rd/rd_publishingClient.cpp'

RD_SIMULATOR_SERVER_CPP =  SAMPLE_APP_DIR + '/rd_main.c'
RD_SIMULATOR_PUB_CLIENT_CPP =  SAMPLE_APP_DIR + '/rd_publishingClient.cpp'

RD_CPP = [TEST_MAIN, COMMON_UTIL_CPP, RD_HELPER_CPP, CALL_GRAPH_CPP]

RD_TC_SRC = [RD_CPP, RD_STC_CPP, RD_BTC_CPP, COMMON_STATIC_LIBS, RD_STATIC_LIBS]

######################################################################

# Initializing Build
######################################################################

env_linux.ParseConfig("pkg-config --cflags --libs uuid")

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

rd_tc = env_linux.Program(source = RD_TC_SRC, target = RD_TEST_BIN, CPPPATH = RD_CINCLUDE, LIBS = RD_LIBS, LIBPATH = RD_LIB_LOCATION, CPPFLAGS = RD_CFLAGS)

rd_sim_server = env_linux.Program(source = RD_SIMULATOR_SERVER_CPP, target = RD_SIM_MAIN, CPPPATH = RD_CINCLUDE, LIBS = RD_LIBS, LIBPATH = RD_LIB_LOCATION, CPPFLAGS = RD_CFLAGS)

rd_sim_pub = env_linux.Program(source = RD_SIMULATOR_PUB_CLIENT_CPP, target = RD_SIM_PUB, CPPPATH = RD_CINCLUDE, LIBS = RD_LIBS, LIBPATH = RD_LIB_LOCATION, CPPFLAGS = RD_CFLAGS)

pre_job = [create_target_dir]

######################################################################

# Define Build Targets
######################################################################

target_service = env_linux.get('TARGET_SERVICE')
target_transport = env_linux.get('TARGET_TRANSPORT')
target_tc = env_linux.get('TARGET_TC')
default_targets = [pre_job]
install_targets = []

print "target_service = " + target_service
print "target_tc = " + target_tc
print "target_transport = " + target_transport

#SConscript(GTEST + '/SConscript')

print "---------------service--------------" + target_service + target_tc

if 'rd' in target_service or 'all' in target_service:
    install_targets += [rd_sim_pub, rd_sim_server]
    if 'itc' in target_tc or 'all' in target_tc:
        print '---------------RD STC Build Selected---------------'
        install_targets += [rd_tc]
      
   # if 'utc' in target_tc or 'all' in target_tc:
    #    print '---------------RD BTC Build Selected---------------'
     #   install_targets += [rd_btc]


install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
