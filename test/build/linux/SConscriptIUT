'''
******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building Conformance Test App for Linux---------------\n'

Import('env_linux')
import os


# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
ORG_SRC = ''

iotivity_directory = env_linux.get('IOTIVITY_DIR')
SECURED = env_linux.get('SECURED')

print "iotivity root is --------------------------------" + iotivity_directory

if env_linux.get('RELEASE'):
    target_release = 'release'
else:
    target_release = 'debug'

print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

IUT_RESOURCE_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
IUT_RESOURCE_CBOR = ORG_SRC_HOME + '/extlibs/tinycbor/tinycbor/src/'

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

COMMON_UTIL_DIR = PROJECT_HOME +  TARGET + 'common/commonutil/c_cpp'

IUT_SOURCE_DIR = PROJECT_HOME +  TARGET + 'testapp/IUTSimulatorApp/c_cpp'

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -Wall -DLINUX -fpermissive -D__LINUX__ -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

IUT_CFLAGS = [COMMON_FLAGS]

if SECURED == '1':
    IUT_CFLAGS.append('-DSECURED')
    IUT_CFLAGS.append('-D__WITH_DTLS__')

IUT_CINCLUDE = [
                            PROJECT_HOME + '/include',
                            PROJECT_HOME + '/../resource/include', 
                            PROJECT_HOME + '/../resource/csdk/connectivity/api', 
                            PROJECT_HOME + '/../resource/csdk/stack/include', 
                            PROJECT_HOME + '/../resource/csdk/security/include',
                            PROJECT_HOME + '/../resource/csdk/ocsocket/include',
                            PROJECT_HOME + '/../resource/csdk/ocrandom/include',
                            PROJECT_HOME + '/../resource/csdk/logger/include',
                            PROJECT_HOME + '/../resource/c_common/',
                            PROJECT_HOME + '/../resource/oc_logger/include',
                            PROJECT_HOME + '/../extlibs/cereal/include/',
                            PROJECT_HOME + '/../extlibs/timer/',
                            PROJECT_HOME + '/../extlibs/tinycbor/tinycbor/src/',
                            PROJECT_HOME + '/../extlibs/timer/' 
              ]

COMMON_LIB_LOCATION = [RESOURCE_LIB_DIR]
IUT_LIB_LOCATION = [COMMON_LIB_LOCATION, IUT_RESOURCE_LIB]

COMMON_STATIC_LIBS = []
COMMON_SHARED_LIBS = Split('libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction libcoap pthread libglib-2.0 gcov')


IUT_STATIC_RESOURCE_LIBS = []
IUT_LIBS = COMMON_SHARED_LIBS

IUT_APP_BIN = 'IUTSimulator'

RESOURCE_SERVER_CPP = COMMON_UTIL_DIR + '/ResourceServer.cpp'
SAMPLE_RESOURCE_CPP = COMMON_UTIL_DIR + '/SampleResource.cpp'
RESOURCE_HELPER_CPP = COMMON_UTIL_DIR + '/ResourceHelper.cpp'
SOURCE_CPP = IUT_SOURCE_DIR + '/IUTSimulator.cpp'
IUT_APP_SRC = [SOURCE_CPP, RESOURCE_SERVER_CPP, SAMPLE_RESOURCE_CPP, RESOURCE_HELPER_CPP]

######################################################################
# Initializing Build
######################################################################

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

IUT_APP = env_linux.Program(source = IUT_APP_SRC, target = IUT_APP_BIN, CPPPATH = IUT_CINCLUDE, LIBS = IUT_LIBS, LIBPATH = IUT_LIB_LOCATION, RPATH = IUT_RESOURCE_LIB, CPPFLAGS = IUT_CFLAGS)

copy_justworks_dat_file = env_linux.Command('copy_justworks_dat_file', [], Copy('.', '../resource/csdk/security/provisioning/sample/oic_svr_db_server_justworks.dat'))
copy_randompin_dat_file = env_linux.Command('copy_randompin_dat_file', [], Copy('.', '../resource/csdk/security/provisioning/sample/oic_svr_db_server_randompin.dat'))

pre_job = [create_target_dir]

######################################################################
# Define Build Targets
######################################################################

default_targets = [pre_job]
install_targets = []


#IUT_APP
install_targets += [IUT_APP]

install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin + [copy_justworks_dat_file, copy_randompin_dat_file]

env_linux.Default(default_targets)

