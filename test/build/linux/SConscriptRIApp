'''
******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building RI InetOp App for Linux---------------\n'

Import('env_linux')
import os


# Initializing Home Dir
######################################################################

TARGET = env_linux['VARIANT_DIR']
ENV_HOME = '../../..'
PROJECT_HOME = '../../'
EXT_LIB_HOME = PROJECT_HOME + '/extlibs'
ORG_SRC = ''

target_source = env_linux.get('TARGET_SOURCE')
iotivity_directory = env_linux.get('IOTIVITY_DIR')

print "target source is --------------------------------" + target_source
print "iotivity root is --------------------------------" + iotivity_directory

if env_linux.get('RELEASE'):
	target_release = 'release'
else:
	target_release = 'debug'

print "target build is --------------------------------" + target_release

ORG_SRC = env_linux['ORG_SRC']
ORG_SRC_HOME = env_linux['ORG_SRC_HOME']

target_arch = env_linux.get('TARGET_ARCH')
ORG_SRC_OUT_DIR = '/out/linux/' + target_arch + '/' + target_release
COMMON_RELEASE_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR
SERVER_JUST_WORKS_SECURITY_FILE_NAME = 'oic_svr_db_server_justworks.dat'
SERVER_SECURITY_FILE_NAME = 'oic_svr_db_server.dat'
CLIENT_SECURITY_FILE_NAME = 'oic_svr_db_client.dat'

######################################################################
# Initializing RI InterOp Test App Directories
######################################################################

RI_RESOURCE_DIR = ORG_SRC_HOME + '/resource'
RI_RESOURCE_INCLUDE = RI_RESOURCE_DIR + '/include'
RI_RESOURCE_LIB = ORG_SRC_HOME + ORG_SRC_OUT_DIR
RI_RESOURCE_STACK = RI_RESOURCE_DIR + '/csdk/stack/include'
RI_RESOURCE_SOCKET = RI_RESOURCE_DIR + '/csdk/ocsocket/include'
RI_RESOURCE_RANDOM = RI_RESOURCE_DIR + '/csdk/ocrandom/include'
RI_RESOURCE_LOGGER = RI_RESOURCE_DIR + '/csdk/logger/include'
RI_RESOURCE_COMMON = RI_RESOURCE_DIR + '/c_common/'
RI_RESOURCE_OC_LOGGER = RI_RESOURCE_DIR + '/oc_logger/include'
RI_RESOURCE_CEREAL = ORG_SRC_HOME + '/extlibs/cereal/include/'
RI_RESOURCE_TIMER = ORG_SRC_HOME + '/extlibs/timer/'

######################################################################
# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + ORG_SRC_OUT_DIR

COMMON_UTIL_DIR = PROJECT_HOME +  TARGET + 'common/commonutil/c_cpp'

INCLUDE_DIR = PROJECT_HOME + '/include'
RI_INTEROP_APP_DIR = PROJECT_HOME +  TARGET + 'iBtestapp/modules/ri/c_cpp'

######################################################################
# Initializing Flags
######################################################################

env_linux['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -DLINUX -fpermissive -D__TC_PLATFORM_LINUUX__ -D__LINUX__ -D __WITH_DTLS__  -DWITH_TCP -finstrument-functions -ftest-coverage -fprofile-arcs')

RI_CFLAGS = [COMMON_FLAGS]

######################################################################
# Initializing Includes
######################################################################

COMMON_CINCLUDE = [INCLUDE_DIR]
RI_CINCLUDE = [COMMON_CINCLUDE, RI_RESOURCE_INCLUDE, RI_RESOURCE_STACK, RI_RESOURCE_SOCKET, RI_RESOURCE_RANDOM, RI_RESOURCE_OC_LOGGER, INCLUDE_DIR, RI_RESOURCE_COMMON]

######################################################################
# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [RESOURCE_LIB_DIR]
RI_LIB_LOCATION = [COMMON_LIB_LOCATION, RI_RESOURCE_LIB]

COMMON_STATIC_LIBS = []
COMMON_SHARED_LIBS = Split('libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction libcoap pthread libglib-2.0 gcov')


RI_STATIC_RESOURCE_LIBS = []
RI_LIBS = COMMON_SHARED_LIBS

######################################################################
# Initializing Targets
######################################################################

RI_INTEROP_APP_BIN = 'InterOpAppRI'

######################################################################
# Initializing Sources
######################################################################

RESOURCE_SERVER_CPP = COMMON_UTIL_DIR + '/ResourceServer.cpp'
SAMPLE_RESOURCE_CPP = COMMON_UTIL_DIR + '/SampleResource.cpp'
RESOURCE_HELPER_CPP = COMMON_UTIL_DIR + '/ResourceHelper.cpp'
SOURCE_CPP = RI_INTEROP_APP_DIR + '/InterOpAppRI.cpp'
RI_INTEROP_APP_SRC = [SOURCE_CPP, RESOURCE_SERVER_CPP, SAMPLE_RESOURCE_CPP, RESOURCE_HELPER_CPP]

######################################################################
# Initializing Build
######################################################################

create_target_dir = env_linux.Command('target.out', [], Mkdir(TARGET))

RI_INTEROP_APP = env_linux.Program(source = RI_INTEROP_APP_SRC, target = RI_INTEROP_APP_BIN, CPPPATH = RI_CINCLUDE, LIBS = RI_LIBS, LIBPATH = RI_LIB_LOCATION, CPPFLAGS = COMMON_FLAGS)

pre_job = [create_target_dir]

######################################################################
# Define Build Targets
######################################################################

default_targets = [pre_job]
install_targets = []


#RI_INTEROP_APP
install_targets += [RI_INTEROP_APP]

install = env_linux.Install(PROJECT_HOME + TARGET, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)

