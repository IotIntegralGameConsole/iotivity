'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Tizen
#
##

print '\n---------------Started Building IotivitySecTest for Tizen---------------\n'

env = Environment(CC='g++')

# Initializing Home Dir
######################################################################

ENV_HOME = ''
PROJECT_HOME = 'test'
EXT_LIB_HOME = 'test/extlibs'
IOTIVITY_HOME = 'iotivity'
SRC_HOME = ''

######################################################################

# Initializing RH Dir
######################################################################

RH_HOME_DIR = IOTIVITY_HOME + '/service/resource-hosting'
RH_RESOURCE_DIR = IOTIVITY_HOME + '/resource'
RH_C_COMMON_DIR = RH_RESOURCE_DIR + '/c_common'
RH_RESOURCE_INCLUDE = RH_RESOURCE_DIR + '/include'
RH_LIB = IOTIVITY_HOME + '/out/tizen/armv7l/release'
RH_RESOURCE_STACK = RH_RESOURCE_DIR + '/csdk/stack/include'
RH_RESOURCE_SOCKET = RH_RESOURCE_DIR + '/csdk/ocsocket/include'
RH_RESOURCE_RANDOM = RH_RESOURCE_DIR + '/csdk/ocrandom/include'
RH_RESOURCE_LOGGER = RH_RESOURCE_DIR + '/csdk/logger/include'
RH_RESOURCE_OC_LOGGER = RH_RESOURCE_DIR + '/oc_logger/include'
RH_JSON_INCLUDE = IOTIVITY_HOME + '/extlibs/cjson'

RH_INCLUDE = RH_HOME_DIR + '/include'

DLOG_INC = '/usr/include/dlog'

######################################################################

# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/tizen'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################

# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = RH_LIB

TC_DIR = PROJECT_HOME + '/src/tc'
ITC_DIR = TC_DIR + '/rh/gtest/src/stc'
UTC_DIR = TC_DIR + '/rh/gtest/src/btc'
TESTAPP_DIR = PROJECT_HOME + '/src/testapp'
TESTAPP_CINCOUDE = PROJECT_HOME + '/include/testapp'

COMMON_DIR = PROJECT_HOME + '/src/common'
COMMON_UTIL_DIR = PROJECT_HOME + '/src/common/commonutil/c_cpp'
CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'
TC_COMMON_DIR = COMMON_DIR + '/testcase'
RH_COMMON_DIR = TC_DIR + '/rh/gtest/src/helper'
TESTAPP_COMMON_DIR = COMMON_DIR + '/testapp/c_cpp'

INCLUDE_DIR = PROJECT_HOME + '/include'
TC_INCLUDE_DIR = INCLUDE_DIR + '/testcase'
RH_INCLUDE_DIR = TC_DIR + '/rh/gtest/include'
COMMON_UTIL_INCLUDE_DIR = INCLUDE_DIR + '/commonutil'

TESTAPP_INCLUDE_DIR = INCLUDE_DIR + '/testapp'
TESTAPP_CA_DIR = TESTAPP_DIR + '/ca/c_cpp'

TARGET = PROJECT_HOME + '/bin'
#TARGET = env['VARIANT_DIR'] 

######################################################################

# Initializing Flags
######################################################################

env['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -std=gnu++0x -pthread -Wall -DTIZEN -fpermissive -D__TIZEN__ -finstrument-functions')

RH_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR, DLOG_INC]

RH_CINCLUDE = [COMMON_CINCLUDE, RH_INCLUDE, RH_INCLUDE_DIR, RH_JSON_INCLUDE, RH_RESOURCE_INCLUDE, RH_RESOURCE_STACK, RH_RESOURCE_SOCKET, RH_RESOURCE_RANDOM, RH_RESOURCE_LOGGER, RH_RESOURCE_OC_LOGGER, RH_C_COMMON_DIR ]

######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR]
RH_LIB_LOCATION = [COMMON_LIB_LOCATION, RH_LIB]


#libdlog
COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction pthread libglib-2.0 libdlog')

#'NOTISDKLibrary',  RH_LIB + '/libNOTISDKLibrary.a'
#RH_STATIC_LIBS = [RH_LIB + '/liboc.a', RH_LIB + '/liboctbstack.a', RH_LIB + '/liboc_logger.a', RH_LIB + '/libcoap.a']
RH_STATIC_LIBS = []
#libResourceHosting
RH_SHARED_LIBS = ['libresource_hosting', 'libpthread', 'libconnectivity_abstraction']
RH_LIBS = [COMMON_SHARED_LIBS, RH_SHARED_LIBS]

######################################################################

# Initializing Targets
######################################################################

RH_MANAGER_BIN = 'rh_manager'
RH_CONSUMER_BIN = 'rh_consumer'
RH_PROVIDER_BIN = 'rh_temp_hum_sensor'
RH_PROVIDER2_BIN = 'rh_temp_hum_sensor2'
RH_NONHOSTABLE_PROVIDER_BIN = 'rh_non_hostable_provider'
RH_ITC_BIN = 'iotivity_rh_test'
RH_UTC_BIN = 'iotivity_rh_utc'

TEST_MAIN_BIN = 'test_main.o'
COMMON_UTIL_BIN = 'common_util.o'

######################################################################

# Initializing Sources
######################################################################

COMMON_CPP = Glob(COMMON_UTIL_DIR + '/*.cpp')
COMMON_TC_CPP = Glob(COMMON_DIR + '/testcase/*.cpp')
RH_HELPER_CPP = Glob(RH_COMMON_DIR + '/*.cpp')

COMMON_UTIL_CPP = COMMON_UTIL_DIR + '/CommonUtil.cpp'

TEST_MAIN = [COMMON_DIR + '/testcase/gtest/IotivitySECTestMain.cpp'] 

RH_MANAGER_CPP = Glob(TESTAPP_DIR + '/rh/c_cpp/manager/*.c')
RH_CONSUMER_CPP = Glob(TESTAPP_DIR + '/rh/c_cpp/consumer/*.cpp')
RH_PROVIDER_CPP = Glob(TESTAPP_DIR + '/rh/c_cpp/tempHumSensor/*.cpp')
RH_PROVIDER2_CPP = Glob(TESTAPP_DIR + '/rh/c_cpp/tempHumSensor2/*.cpp')
RH_NONHOSTABLE_PROVIDER_CPP = Glob(TESTAPP_DIR + '/rh/c_cpp/nonHostableProvider/*.cpp')
RH_ITC_CPP = Glob(ITC_DIR + '/*.cpp')
RH_UTC_CPP = Glob(UTC_DIR + '/*.cpp')

RH_CPP = [TEST_MAIN, COMMON_UTIL_CPP, RH_HELPER_CPP, CALL_GRAPH_CPP]

RH_MANAGER_SRC = [RH_MANAGER_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_CONSUMER_SRC = [RH_CONSUMER_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_PROVIDER_SRC = [RH_PROVIDER_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_PROVIDER2_SRC = [RH_PROVIDER2_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_NONHOSTABLE_PROVIDER_SRC = [RH_NONHOSTABLE_PROVIDER_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_ITC_SRC = [RH_CPP, RH_ITC_CPP, RH_UTC_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]
RH_UTC_SRC = [RH_CPP, RH_UTC_CPP, COMMON_STATIC_LIBS, RH_STATIC_LIBS]

######################################################################

# Initializing Build
######################################################################

create_target_dir = env.Command('target.out', [], Mkdir(TARGET))

test_main = env.Object(source = TEST_MAIN, target = TEST_MAIN_BIN, CPPPATH = COMMON_CINCLUDE, CPPFLAGS = COMMON_FLAGS )

rh_provider = env.Program(source = RH_PROVIDER_SRC, target = RH_PROVIDER_BIN, CPPPATH = RH_CINCLUDE, LIBS = RH_LIBS, LIBPATH = RH_LIB_LOCATION, CPPFLAGS = RH_CFLAGS)

rh_provider2 = env.Program(source = RH_PROVIDER2_SRC, target = RH_PROVIDER2_BIN, CPPPATH = RH_CINCLUDE, LIBS = RH_LIBS, LIBPATH = RH_LIB_LOCATION, CPPFLAGS = RH_CFLAGS)

rh_non_hostable_provider = env.Program(source = RH_NONHOSTABLE_PROVIDER_SRC, target = RH_NONHOSTABLE_PROVIDER_BIN, CPPPATH = RH_CINCLUDE, LIBS = RH_LIBS, LIBPATH = RH_LIB_LOCATION, CPPFLAGS = RH_CFLAGS)

rh_itc = env.Program(source = RH_ITC_SRC, target = RH_ITC_BIN, CPPPATH = RH_CINCLUDE, LIBS = RH_LIBS, LIBPATH = RH_LIB_LOCATION, CPPFLAGS = RH_CFLAGS)

rh_utc = env.Program(source = RH_UTC_SRC, target = RH_UTC_BIN, CPPPATH = RH_CINCLUDE, LIBS = RH_LIBS, LIBPATH = RH_LIB_LOCATION, CPPFLAGS = RH_CFLAGS)

pre_job = [create_target_dir]

######################################################################

# Define Build Targets
######################################################################

target_service = env.get('TARGET_SERVICE')
target_tc = env.get('TARGET_TC')
default_targets = []

default_targets += [rh_provider]
default_targets += [rh_provider2]
default_targets += [rh_non_hostable_provider]
default_targets += [rh_itc]
#default_targets += [rh_utc]
        
env.Default(default_targets)

