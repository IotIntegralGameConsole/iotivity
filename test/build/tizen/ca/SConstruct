'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building IotivitySecTest CA for Tizen---------------\n'

env = Environment(CC='g++')

secured = env.get('SECURED')
target_test = env.get('TARGET_TEST')
target_transport = ARGUMENTS.get('TARGET_TRANSPORT')

print 'target_transport: ' + target_transport

ENV_HOME = '.'
PROJECT_HOME = 'test'
IOTIVITY_ROOT = 'iotivity'

CA_TC_BIN = 'iotivity_ca_test'

list_of_transport = [ 'None', 'IP', 'BT', 'BLE', 'TCP' ]
tranport_binary_substrings = [ '', '_ip', '_edr', '_ble', '_tcp' ]
transport_specific_bins = [ 'iotivity_ca_test', 'iotivity_ca_ip_test', 'iotivity_ca_edr_test', 'iotivity_ca_ble_test', 'iotivity_ca_tcp_test' ]
list_transport_cflags = [
                            ['', ''], 
                            ['-D__IP__', '-D__ALL_TRANSPORT__'], 
                            ['-D__EDR__', '-D__ALL_TRANSPORT__'], 
                            ['-D__BLE__', '-D__ALL_TRANSPORT__'], 
                            ['-D__TCP__', '-DTCP_ADAPTER', '-D__ALL_TRANSPORT__']
                        ]

COMMON_FLAGS = Split('-s -pthread -std=gnu++0x -Wall -DTIZEN -fpermissive -finstrument-functions')

IOTIVITY_INCLUDE_PATH = [ 
                            IOTIVITY_ROOT + '/resource/c_common',
                            IOTIVITY_ROOT + '/resource/csdk/stack/include',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/api', 
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/external/inc', 
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/common/inc', 
                            IOTIVITY_ROOT + '/resource/c_common/oic_malloc/include', 
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include'
                        ]

TC_INCLUDE_PATH = [
                    PROJECT_HOME + '/include',
                    PROJECT_HOME + '/extlibs/include',
                    PROJECT_HOME + '/include/testcase',
                    PROJECT_HOME + '/include/commonutil',
                    PROJECT_HOME + '/src/tc/ca/gtest/include',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/include'
                ]

SIMULATOR_INCLUDE_PATH = [ PROJECT_HOME + '/src/testapp/ca/c_cpp/include']

CA_TC_SRC = Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/stc/*.cpp') + Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/btc/*.cpp') + Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp') + Glob(PROJECT_HOME + '/src/tc/ca/gtest/src/helper/CAHelper.cpp')

CA_LIBS = Split('-lm -lpthread -lrt -ldl -lstdc++ -lgobject-2.0 -lgio-2.0 -lglib-2.0 -lcapi-network-wifi -ldlog -lcapi-network-bluetooth -lconnectivity_abstraction -lcoap -lexpat -lboost_system -lboost_filesystem -lboost_thread -ldl')

COMMON_CFLAGS = Split('-D__TIZEN__  -D__TC_PLATFORM_TIZEN__ -s -pthread -finstrument-functions -fpermissive -fPIC -DWITH_POSIX -Wall -DSLP_SDK_LOG -g -D_GNU_SOURCE -DTIZEN_DEBUG_ENABLE -DTB_LOG -std=gnu++0x `pkg-config --cflags --libs dlog com.oic.ri capi-network-wifi gobject-2.0 glib-2.0` -lm -lpthread -lrt -ldl -lstdc++ -lgobject-2.0 -lgio-2.0 -lglib-2.0 -lcapi-network-wifi -ldlog -lcapi-network-bluetooth -lconnectivity_abstraction -lcoap')

TC_LIB_PATH = [ PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/tizen' ]

if secured == '1':
    COMMON_CFLAGS.append('-D__WITH_DTLS__')

i = -1
    
for transport in list_of_transport:

    i = i + 1
    
    if target_transport != 'ALL':
        if target_transport != transport:
            continue

    network_cflags = COMMON_CFLAGS[:]
    
    for transport_cflag in list_transport_cflags[i]:
        if transport_cflag != '':
            network_cflags.append(transport_cflag)
    
    list_of_src = []

    env.Object(source = PROJECT_HOME + '/src/common/testcase/gtest/IotivitySECTestMain.cpp',
                target = 'ca' + tranport_binary_substrings[i] + 'test_main', 
                CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                LIBS = CA_LIBS, 
                LIBPATH = TC_LIB_PATH, 
                CPPFLAGS = network_cflags)

    list_of_src.append('ca' + tranport_binary_substrings[i] + 'test_main')

    for single_cpp in CA_TC_SRC:
        temp_single_cpp = str(single_cpp)
        if not temp_single_cpp.endswith('.cpp'):
            continue
        single_object = temp_single_cpp.replace('.cpp', '.o')
        single_object = 'ca' + tranport_binary_substrings[i] + single_object

        env.Object(source = single_cpp, 
                target = single_object, 
                CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                LIBS = CA_LIBS, 
                LIBPATH = TC_LIB_PATH, 
                CPPFLAGS = network_cflags)

        list_of_src.append(single_object)
    
    env.Program (source = list_of_src + [PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/tizen/libgtest.a'], 
                target = transport_specific_bins[i], 
                CPPPATH = IOTIVITY_INCLUDE_PATH + TC_INCLUDE_PATH, 
                LIBS = CA_LIBS, 
                LIBPATH = TC_LIB_PATH, 
                CPPFLAGS = network_cflags)


env.Program (source = PROJECT_HOME + '/src/testapp/ca/c_cpp/src/ca_simulator.c', 
            target = 'iotivity_ca_simulator', 
            CPPPATH = SIMULATOR_INCLUDE_PATH + IOTIVITY_INCLUDE_PATH, 
            LIBS = CA_LIBS, 
            CPPFLAGS = COMMON_CFLAGS)
