'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Tizen
#
##

print '\n---------------Started Building IotivitySecTest for Tizen---------------\n'

env = Environment(CC='g++')

# Initializing Home Dir
######################################################################

ENV_HOME = ''
PROJECT_HOME = 'test'
EXT_LIB_HOME = 'test/extlibs'
ORG_SRC_HOME = 'iotivity'
SRC_HOME = ''

######################################################################

# Initializing RE Dir
######################################################################

RAPIDXML_SUB_INCLUDE = ORG_SRC_HOME + '/extlibs/'
RE_RESOURCE_DIR = ORG_SRC_HOME + '/resource'
RE_RESOURCE_INCLUDE = RE_RESOURCE_DIR + '/include'
RE_RESOURCE_LIB = ORG_SRC_HOME + '/out/tizen/armv7l/release'
RE_RESOURCE_CSDK_LIB = RE_RESOURCE_LIB
RE_RESOURCE_STACK = RE_RESOURCE_DIR + '/csdk/stack/include'
RE_RESOURCE_SOCKET = RE_RESOURCE_DIR + '/csdk/ocsocket/include'
RE_RESOURCE_RANDOM = RE_RESOURCE_DIR + '/csdk/ocrandom/include'
RE_RESOURCE_LOGGER = RE_RESOURCE_DIR + '/csdk/logger/include'
RE_RESOURCE_OC_LOGGER = RE_RESOURCE_DIR + '/oc_logger/include'
RE_RESOURCE_CEREAL = ORG_SRC_HOME + '/extlibs/cereal/include/'
RE_RESOURCE_TIMER = ORG_SRC_HOME + '/extlibs/timer/'
RE_RESOURCE_OC_LOGGER_LIB = RE_RESOURCE_LIB
RE_DIR = ORG_SRC_HOME + '/service/resource-encapsulation'
RE_MODULES_DIR = RE_DIR + '/src'
RE_INCLUDE = RE_DIR + '/include/'
RE_C_COMMON = ORG_SRC_HOME + '/resource/c_common'
RE_COMMON_INCLUDE = RE_MODULES_DIR + '/common/primitiveResource/include/'
RE_COMMON_TIMER_INCLUDE = RE_MODULES_DIR + '/common/expiryTimer/include/'
RE_COMMON_INTERNAL_INCLUDE = RE_MODULES_DIR + '/common/primitiveResource/include/internal/'
RE_BROKER_INCLUDE = RE_MODULES_DIR + '/resourceBroker/include/'
RE_CACHE_INCLUDE = RE_MODULES_DIR + '/resourceCache/include/'
RE_CONTAINER_INCLUDE = RE_MODULES_DIR + '/resourceContainer/include/'
RE_CONTAINER_BUNDLE_INCLUDE = RE_MODULES_DIR + '/resourceContainer/bundle-api/include/'
RE_SERVER_BUILDER_INCLUDE = RE_MODULES_DIR + '/serverBuilder/include/'
RE_LIB = RE_RESOURCE_LIB
RE_LIB_TIMER = RE_RESOURCE_LIB + '/extlibs/timer/'

######################################################################


# Initializing Gtest Dir
######################################################################

GTEST = EXT_LIB_HOME + '/gtest-1.7.0'
GTEST_INCLUDE = GTEST + '/include'
GTEST_BIN = GTEST + '/bin/tizen'
GTEST_LIB = GTEST_BIN + '/libgtest.a'

######################################################################

# Initializing Project Dir
######################################################################

RESOURCE_LIB_DIR = ORG_SRC_HOME + '/out/tizen/armv7l/release'

TC_DIR = PROJECT_HOME + '/src/tc/re/gtest'
ITC_DIR = TC_DIR + '/src/stc'
UTC_DIR = TC_DIR + '/src/btc'
TESTAPP_DIR = PROJECT_HOME + '/src/testapp'
TESTAPP_CINCLUDE = PROJECT_HOME + '/include/testapp'

COMMON_DIR = PROJECT_HOME + '/src/common'
COMMON_UTIL_DIR = PROJECT_HOME + '/src/common/commonutil/c_cpp'
TC_COMMON_DIR = COMMON_DIR + '/testcase'
RE_COMMON_DIR = COMMON_DIR + '/testcase/re/gtest'
TESTAPP_COMMON_DIR = COMMON_DIR + '/testapp/c_cpp'

INCLUDE_DIR = PROJECT_HOME + '/include'
TC_INCLUDE_DIR = INCLUDE_DIR + '/testcase'
RE_INCLUDE_DIR = PROJECT_HOME + '/src/tc/re/gtest/include'
COMMON_UTIL_INCLUDE_DIR = INCLUDE_DIR + '/commonutil'

TESTAPP_INCLUDE_DIR = INCLUDE_DIR + '/testapp'


TARGET = PROJECT_HOME + '/bin'
#TARGET = env['VARIANT_DIR'] 

######################################################################

# Initializing Flags
######################################################################

env['CC'] = 'g++'

COMMON_FLAGS = Split('-s -pthread -std=gnu++0x -pthread -Wall -DTIZEN -fpermissive -D__TIZEN__ -finstrument-functions')

RE_CFLAGS = [COMMON_FLAGS]

######################################################################

# Initializing Includes
######################################################################

COMMON_CINCLUDE = [GTEST_INCLUDE, COMMON_UTIL_INCLUDE_DIR, INCLUDE_DIR, TC_INCLUDE_DIR]

RE_CINCLUDE = [RAPIDXML_SUB_INCLUDE, RE_C_COMMON, COMMON_CINCLUDE, RE_RESOURCE_INCLUDE, RE_RESOURCE_STACK, RE_RESOURCE_SOCKET, RE_RESOURCE_RANDOM, RE_RESOURCE_OC_LOGGER, RE_RESOURCE_CEREAL, RE_RESOURCE_TIMER, RE_LIB_TIMER, RE_INCLUDE, RE_COMMON_INCLUDE, RE_COMMON_TIMER_INCLUDE, RE_COMMON_INTERNAL_INCLUDE, RE_BROKER_INCLUDE, RE_CACHE_INCLUDE, RE_CONTAINER_INCLUDE, RE_CONTAINER_BUNDLE_INCLUDE, RE_SERVER_BUILDER_INCLUDE, RE_INCLUDE_DIR]

######################################################################

# Initializing Libraries
######################################################################

COMMON_LIB_LOCATION = [GTEST, RESOURCE_LIB_DIR]
RE_LIB_LOCATION = [COMMON_LIB_LOCATION, RE_RESOURCE_LIB, RE_RESOURCE_CSDK_LIB, RE_RESOURCE_OC_LOGGER_LIB, RE_LIB]

COMMON_STATIC_LIBS = [GTEST_LIB]
COMMON_SHARED_LIBS = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction pthread libglib-2.0 libdlog')

# liboc_logger_core  libcoap

#TM_STATIC_LIBS = [TM_LIB + '/libTGMSDKLibrary.a']
#TM_STATIC_RESOURCE_LIBS = [TM_RESOURCE_LIB + '/liboc.a', TM_RESOURCE_CSDK_LIB + '/liboctbstack.a', TM_RESOURCE_OC_LOGGER_LIB + '/liboc_logger.a', TM_RESOURCE_OC_LOGGER_LIB + '/libcoap.a']

#RE_STATIC_LIBS = [RE_LIB + '/librcs_client.a', RE_LIB + '/librcs_common.a', RE_LIB + '/librcs_container.a', RE_LIB + '/librcs_server.a', RE_LIB + '/libocsrm.a']
RE_STATIC_RESOURCE_LIBS = []
RE_STATIC_LIBS = []
RE_SHARED_LIBS = Split('-lHueBundle -lDISensorBundle -lBMISensorBundle -lrcs_common -lrcs_container -lrcs_server -lrcs_client')
RE_LIBS = [COMMON_SHARED_LIBS, RE_SHARED_LIBS]

######################################################################

# Initializing Targets
######################################################################

RE_ITC_BIN = 'iotivity_re_test'
RE_TEST_SERVER_BIN = 'retestserver'

TEST_MAIN_BIN = 'test_main.o'
COMMON_UTIL_BIN = 'common_util.o'
RE_HELPER_BIN = 're_helper.o'


######################################################################

# Initializing Sources
######################################################################

COMMON_CPP = Glob(COMMON_UTIL_DIR + '/*.cpp')
COMMON_TC_CPP = Glob(COMMON_DIR + '/testcase/*.cpp')

RE_HELPER_CPP = Glob(TC_DIR + '/src/helper/*.cpp')
COMMON_UTIL_CPP = COMMON_UTIL_DIR + '/CommonUtil.cpp'

RE_TEST_SERVER_CPP = TESTAPP_DIR + '/re/c_cpp/src/retestservers.cpp'

CALL_GRAPH_CPP = COMMON_UTIL_DIR + '/trace.c'

TEST_MAIN = [PROJECT_HOME + '/src/common/testcase/gtest/IotivitySECTestMain.cpp'] 

RE_ITC_CPP = Glob(ITC_DIR + '/*.cpp')
RE_UTC_CPP = Glob(UTC_DIR + '/*.cpp')

RE_CPP = [TEST_MAIN, COMMON_UTIL_CPP, RE_HELPER_CPP, CALL_GRAPH_CPP]

RE_ITC_SRC = [RE_CPP, RE_ITC_CPP, RE_UTC_CPP, COMMON_STATIC_LIBS, RE_STATIC_LIBS, RE_STATIC_RESOURCE_LIBS]
RE_UTC_SRC = [RE_CPP, RE_UTC_CPP, COMMON_STATIC_LIBS, RE_STATIC_LIBS, RE_STATIC_RESOURCE_LIBS]

RE_TEST_SERVER_SRC = [RE_TEST_SERVER_CPP, COMMON_UTIL_CPP, RE_HELPER_CPP, COMMON_STATIC_LIBS, RE_STATIC_LIBS, RE_STATIC_RESOURCE_LIBS]
######################################################################

# Initializing Build
######################################################################

create_target_dir = env.Command('target.out', [], Mkdir(TARGET))

test_main = env.Object(source = TEST_MAIN, target = TEST_MAIN_BIN, CPPPATH = COMMON_CINCLUDE, CPPFLAGS = COMMON_FLAGS )

re_itc = env.Program(source = RE_ITC_SRC, target = RE_ITC_BIN, CPPPATH = RE_CINCLUDE, LIBS = RE_LIBS, LIBPATH = RE_LIB_LOCATION, CPPFLAGS = RE_CFLAGS)

#re_utc = env.Program(source = RE_UTC_SRC, target = RE_UTC_BIN, CPPPATH = RE_CINCLUDE, LIBS = RE_LIBS, LIBPATH = RE_LIB_LOCATION, CPPFLAGS = RE_CFLAGS)

re_test_server = env.Program(source = RE_TEST_SERVER_SRC, target = RE_TEST_SERVER_BIN, CPPPATH = RE_CINCLUDE, LIBS = RE_LIBS, LIBPATH = RE_LIB_LOCATION, CPPFLAGS = RE_CFLAGS)

pre_job = [create_target_dir]

######################################################################

# Define Build Targets
######################################################################

target_service = env.get('TARGET_SERVICE')
target_tc = env.get('TARGET_TC')
default_targets = []

default_targets += [re_test_server]
default_targets += [re_itc]

env.Default(default_targets)
