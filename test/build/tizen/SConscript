'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# The build script for Tizen
#
##

import os
import os.path

print '\n---------------Started Building IotivitySecTest for Tizen---------------\n'

Import('env_tizen')

target_arch = env_tizen.get('TARGET_ARCH')
target_source = env_tizen.get('TARGET_SOURCE')
target_service = env_tizen.get('TARGET_SERVICE')
target_test = env_tizen.get('TARGET_TEST')
variant_dir = env_tizen.get('VARIANT_DIR')
rpm_path = env_tizen.get('RPMS_DIR')
is_prevent_enabled = env_tizen.get('PREVENT')
target_transport = ARGUMENTS.get('TARGET_TRANSPORT')
target_secured = env_tizen.get('SECURED')

print "Value of Prevent : " + is_prevent_enabled
print 'target_secured: ' + target_secured
print 'target_service: ' + target_service
print 'target_test: ' + target_test

if 'PATH_NOT_DEFINED' in rpm_path or not os.path.isdir(rpm_path):
    print warning_msg
    exit(1)
    
    
######################################################################

# Initializing Build
######################################################################

default_targets = []


if os.path.isfile("../../extlibs/gtest-1.7.0/bin/tizen/libgtest.a"):
    print "Gtest library exists"
else:
    print "GTest library for Tizen does not exists, starts building for tizen"
    gbs_script_gtest = "sh extlibs/gtest-1.7.0/gbsbuild.sh %s" % (rpm_path)
    default_targets += [gbs_script_gtest]

if 'tm' in target_service or 'all' in target_service:
    gbs_script_tm = "sh build/tizen/tm/gbsbuild_tm.sh %s %s %s %s %s" % (target_arch, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_tm]
        
        
if 'ca' in target_service or 'all' in target_service:
    gbs_script_ca = "sh build/tizen/ca/gbsbuild_ca.sh %s %s %s %s %s %s %s" % (target_arch, target_transport, target_secured, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_ca]

if 'rh' in target_service or 'all' in target_service:
    gbs_script_rh = "sh build/tizen/rh/gbsbuild_rh.sh %s %s %s %s %s" % (target_arch, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_rh]

if 're' in target_service or 'all' in target_service:
    gbs_script_re = "sh build/tizen/re/gbsbuild_re.sh %s %s %s %s %s" % (target_arch, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_re]

if 'rc' in target_service or 'all' in target_service:
    gbs_script_rc = "sh build/tizen/rc/gbsbuild_rc.sh %s %s %s %s %s" % (target_arch, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_rc]

if 'es' in target_service or 'all' in target_service:
    gbs_script_es = "sh build/tizen/es/gbsbuild_es.sh %s %s %s %s %s" % (target_arch, rpm_path, variant_dir, target_source, is_prevent_enabled)
    default_targets += [gbs_script_es]

if 'ri' in target_service or 'ricsdk' in target_service or 'ricpp' in target_service or 'all' in target_service:
    rpms_dir = env_tizen.get('RPMS_DIR') 
    push = env_tizen.get('PUSH')     
    security_mode = env_tizen.get('SECURITY_MODE')

    gbs_script_ri = "bash build/tizen/ri/gbsbuild.sh stand_alone=false rpms_dir=%s push=%s security_mode=%s target_service=%s target_test=%s" % (rpms_dir, push, security_mode, target_service, target_test)
    default_targets += [gbs_script_ri]
    
if 'iut' in target_service or 'all' in target_service:

    rpms_dir = env_tizen.get('RPMS_DIR') 
    print 'rpms_dir: ' + rpms_dir   
    push = env_tizen.get('PUSH') 
    print 'push: ' + str(push)
    
    security_mode = env_tizen.get('SECURITY_MODE')

    if target_source != '':
        target_source_command = 'target_source=' + target_source
    else:    
        target_source_command = ''

    gbs_script_iut = "bash build/tizen/iut/gbsbuild.sh stand_alone=false %s rpms_dir=%s push=%s security_mode=%s" % (target_source_command, rpms_dir, push, security_mode)
    default_targets += [gbs_script_iut]    
    
    
gbs_build = env_tizen.Command('gbs_build', None, default_targets)

env_tizen.Default(gbs_build)
