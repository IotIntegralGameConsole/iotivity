/******************************************************************
 *
 * Copyright 2016 Samsung Electronics All Rights Reserved.
 *
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************/

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.1.2'
    }
}

import de.undercouch.gradle.tasks.download.Download

/*
 *Variable Initialization
*/
def rootDirectory = project.projectDir
def moduleName = project.gradle.startParameter.taskNames[0]
def caModuleArgs= []
ext.isFirstTime = 'true'

ext.buildmode="release"
ext.gradleAbsolutePath=""
ext.iotivityRootDirectoryFromModules = "../../../../.."
ext.iotivityRootDirectoryFromBuild = "../../.."
ext.secTestRootDirectoryFromBuild = "../.."
ext.secTestRootDirectoryFromModules = "../../../.."
ext.binDirectory ="${secTestRootDirectoryFromModules}/bin/android"
ext.commonText = "${moduleName}"
ext.testAppFrameworkSrcDir = "../../../common/android" 


/*
 *Set IoTivity source folder name from cmd arguments if provided
 *Default means already in IoTivity source folder
*/
if(project.hasProperty('t')){
    iotivityRootDirectoryFromModules = "${iotivityRootDirectoryFromModules}/IotivityOrgSource/${t}/iotivity"
    iotivityRootDirectoryFromBuild = "${iotivityRootDirectoryFromBuild}/IotivityOrgSource/${t}/iotivity"
    caModuleArgs.add("source=${t}")
}

/*
 *JUnit common libraries path definition
*/
def androidLibDir = "extlibs/android/common/"
ext.androidLibFileDirFromModules="${secTestRootDirectoryFromModules}/${androidLibDir}"
def androidLibFileDirFromMainBuild= "${secTestRootDirectoryFromBuild}/${androidLibDir}"
def junitJarFile = "${androidLibFileDirFromMainBuild}/android-junit-report-1.5.8.jar"
def mockitoallJarFile = "${androidLibFileDirFromMainBuild}/mockito-all-1.9.5.jar"
def dexmakerJarFile = "${androidLibFileDirFromMainBuild}/dexmaker-1.0.jar"
def dexmakermockitoJarFile = "${androidLibFileDirFromMainBuild}/dexmaker-mockito-1.0.jar"

/*
 *IoTivity common libraries path definition
*/

def baseAAROutDirectory = "android/android_api/base/build/outputs/aar"
ext.architecture = "armeabi"


 /*
  *Set property value from CLI
  *Default is armeabi
 */

task settingPropertyValue {
        /*
         *Set architecture from cmd arguments if provided
         *Default is armeabi
        */
        if(project.hasProperty('arc')) {
            def tempArch = arc.toString()

            if (tempArch.equals("armeabi") || tempArch.equals("x86") || tempArch.equals("x86_64")) {
                architecture ="${arc}"
            }
        }

       /*
        *Set IoTivity library type from cmd arguments if provided
        *Value can be debug or release
        *Default mode is release
       */
        if(project.hasProperty('m')) {
            def tempMode = m.toString()
            if (tempMode.equals("debug") || tempMode.equals("release")) {
                 buildmode = "${m}"
            }
       }

       /*
       *Set arguments for interop test app
       *If provided interop test app will be built
       *Default API test app will be built
       */
       if(project.hasProperty('app')) {
           iotivityRootDirectoryFromModules = "../../../../../.."
           ext.secTestRootDirectoryFromModules = "../../../../.."
           testAppFrameworkSrcDir = "../../../common/android" 
        }

       /*
        *Set arguments for ca module build only 
        *Value can be debug or release
        *default mode is release
       */
       if(project.hasProperty('c')){
           def tempArgs = c.split()
           for (tempArg in tempArgs) {
               caModuleArgs.add(tempArg)
           }
       }  
      
       if(project.hasProperty('p')){
           gradleAbsolutePath="${p}"
       }
}

ext.baseAARFileDirFromModules = "${iotivityRootDirectoryFromModules}/${baseAAROutDirectory}"
ext.baseAARFile ="iotivity-base-${architecture}-${buildmode}"
def baseAARFileDirFromMainBuild = "${iotivityRootDirectoryFromBuild}/${baseAAROutDirectory}"
def baseAARFileFromMainBuild = "${baseAARFileDirFromMainBuild}/${baseAARFile}"

/*
 *Module gradle build file path definition
*/
def moduleBuildFileDir = "${secTestRootDirectoryFromBuild}/src/tc"
def esModuleBuildFileDir = "${moduleBuildFileDir}/es/junit/build.gradle"
def rcModuleBuildFileDir = "${moduleBuildFileDir}/rc/junit/build.gradle"
def reModuleBuildFileDir = "${moduleBuildFileDir}/re/junit/build.gradle"
def pmModuleBuildFileDir = "${moduleBuildFileDir}/pm/junit/build.gradle"
def caModuleBuildFileDir = "${moduleBuildFileDir}/ca/junit/build.gradle"
def riModuleBuildFileDir = "${moduleBuildFileDir}/ri/junit/build.gradle"
def nsModuleBuildFileDir = "${moduleBuildFileDir}/ns/junit/build.gradle"
def icModuleBuildFileDir = "${moduleBuildFileDir}/ic/junit/build.gradle"

if(project.hasProperty('app')){
    def testAppBaseDirectory = "${secTestRootDirectoryFromBuild}/src/iBtestapp/modules"
    esModuleBuildFileDir = "${testAppBaseDirectory}/phy/android/build.gradle"
    pmModuleBuildFileDir = "${testAppBaseDirectory}/pm/android/build.gradle"
    rcModuleBuildFileDir = "${testAppBaseDirectory}/rc/android/build.gradle"
    reModuleBuildFileDir = "${testAppBaseDirectory}/re/android/build.gradle"
    caModuleBuildFileDir = "${testAppBaseDirectory}/ca/android/build.gradle"
    riModuleBuildFileDir = "${testAppBaseDirectory}/ri/android/build.gradle"
    nsModuleBuildFileDir = "${testAppBaseDirectory}/ns/android/build.gradle"
    icModuleBuildFileDir = "${moduleBuildFileDir}/ic/junit/build.gradle"
}

ext.easySetupNDkBuildDir = "${iotivityRootDirectoryFromBuild}/service/easy-setup/mediator/richsdk/android"
ext.easySetupCoreDir = "${iotivityRootDirectoryFromBuild}/service/easy-setup/mediator/richsdk/android/EasySetupCore"
def downLoadLinks=['https://github.com/downloads/jsankey/android-junit-report/android-junit-report-1.5.8.jar',
                   'https://repo1.maven.org/maven2/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar',
                   'https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/dexmaker/dexmaker-1.0.jar',
                   'https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/dexmaker/dexmaker-mockito-1.0.jar'
                   ]
def baseARRDirFromEasySetupCore = "../../../../../../android/android_api/base/build/outputs/aar"
ext.repoText = "repositories {\n    flatDir{ \n        dirs \"${baseARRDirFromEasySetupCore}\"\n   }\n}"
ext.dependenciesText = "dependencies {\n    compile(name:\"${baseAARFile}\", ext:\'aar\')\n}"

/*
 *task to download junit library
 *if not exist download 
*/
task checkCommonLibFiles(type:Download) {

    doFirst {
        mkdir(androidLibFileDirFromMainBuild)
        src (downLoadLinks)
        overwrite false
        dest gradleAbsolutePath + androidLibFileDirFromMainBuild
    }

}

/*
 * task to check iotivity base library file  
*/
task checkBaseAARFile {

    doFirst {
        
        println("\n*************************Build Infortmation***************************\n")

        if(project.hasProperty('app')) {
            println("Building Interoperability Test App for ${moduleName} module")
        }
        else {
            println("Building API Test App for ${moduleName} module")
        }

        println("Architecture : ${architecture}")
        println("Mode : ${buildmode}")
        println("\n**********************************************************************\n")

        if( !file(baseAARFileFromMainBuild+".aar").exists() ) {
            throw new GradleException("${baseAARFileFromMainBuild}.aar File  Doesn't Exist")
        }
    }
}

/*
 * method to write in a file
*/
public void writeToFile() {
    def f=new File("${easySetupCoreDir}/build.gradle")
    String fileContents = f.text
    if(!fileContents.contains("${repoText}") && !fileContents.contains("${dependenciesText}")) {
         f.append("\n${repoText}")
         f.append("\n${dependenciesText}")
    }
}

/*
 * task to build phy 
*/
task es(type: GradleBuild, dependsOn: [checkCommonLibFiles, 'checkBaseAARFile'])  {
    buildFile = esModuleBuildFileDir
    tasks = ['esbuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build pm
*/
task pm(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = pmModuleBuildFileDir
    tasks = ['pmbuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build re
*/
task re(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = reModuleBuildFileDir
    tasks = ['rebuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build ns
*/
task ns(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = nsModuleBuildFileDir
    tasks = ['nsbuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build rc 
*/
task rc(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = rcModuleBuildFileDir
    tasks = ['rcbuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * create library jar for rc module
*/
task performNDKBuild(type: Exec) {
    workingDir "ca/junit"
    commandLine "./native_build.sh"
    args = caModuleArgs
}

/*
 * task to build ca
*/
task ca(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile', 'performNDKBuild']) {
    buildFile = caModuleBuildFileDir
    tasks = ['cabuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build ri
*/
task ri(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = riModuleBuildFileDir
    tasks = ['ribuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}


/*
 * task to build ic
*/
task ic(type: GradleBuild, dependsOn: ['checkCommonLibFiles', 'checkBaseAARFile']) {
    buildFile = icModuleBuildFileDir
    tasks = ['icbuild']
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
}

/*
 * task to build all modules
*/
task all(dependsOn:['es', 'pm', 're', 'rc', 'ca', 'ns']){

}
